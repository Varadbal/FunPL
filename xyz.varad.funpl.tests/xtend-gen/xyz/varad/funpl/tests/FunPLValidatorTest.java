/**
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;
import xyz.varad.funpl.funPL.FunProgram;
import xyz.varad.funpl.tests.FunPLInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(FunPLInjectorProvider.class)
@SuppressWarnings("all")
public class FunPLValidatorTest {
  @Inject
  @Extension
  private ParseHelper<FunProgram> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  /**
   * @Test
   * def void testForwardReference(){
   * //Global scope intentionally not tested
   * 
   * '''
   * function myFunc()
   * {
   * var i = j;
   * var j = 10;
   * }
   * '''.parse.assertError(FunPLPackage::eINSTANCE.symbolRef,
   * FunPLValidator::FORWARD_REFERENCE,
   * "Symbol forward reference not allowed: 'j'"
   * )
   * }
   */
  @Test
  public void testGlobalRedefinitionLocally() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("var i = 4;");
      _builder.newLine();
      _builder.append("function myFunc(p){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var i = 5;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
