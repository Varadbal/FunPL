/**
 * generated by Xtext 2.15.0
 */
package xyz.varad.funpl.tests.ParsingTests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;
import xyz.varad.funpl.funPL.FunProgram;
import xyz.varad.funpl.tests.FunPLInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(FunPLInjectorProvider.class)
@SuppressWarnings("all")
public class FunPLParsingTestError {
  @Inject
  @Extension
  private ParseHelper<FunProgram> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void testCommentsAndWhiteSpaces() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("//Comment 1");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("/* Comment 2*/");
      _builder.newLine();
      _builder.append("     ");
      _builder.newLine();
      _builder.append("/*");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("Comment 3");
      _builder.newLine();
      _builder.append("*/");
      _builder.newLine();
      _builder.append("function foo(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void expressionedValueDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("var i = 5;");
      _builder.newLine();
      _builder.append("var j = -5;");
      _builder.newLine();
      _builder.append("const k = 3;");
      _builder.newLine();
      _builder.append("var l = true;");
      _builder.newLine();
      _builder.append("const m = false;");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void typedValueDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("var int i;");
      _builder.newLine();
      _builder.append("const int j;");
      _builder.newLine();
      _builder.append("var bool k;");
      _builder.newLine();
      _builder.append("const bool l;");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void basicFunctionDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function foo(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void parameteredFunctionDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function foo(int i, bool j){");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void typedFunctionDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function int foo(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return 5;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("function bool bar(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void statements() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function foo(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var i = 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("const j = false;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("5 + 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return -1;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void expressions() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function void baz(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function void bar(int p1, bool p2){");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("function void foo(int p8){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("1;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("0;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-1;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("false;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var int i;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i = 1;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var bool j = 1;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("j = 2;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i = p8;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("5 + 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("5 + 5 + 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("baz();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bar(1, true);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var int k = i;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
