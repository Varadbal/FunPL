/**
 * generated by Xtext 2.15.0
 */
package xyz.varad.funpl.funPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xyz.varad.funpl.funPL.ArgumentList;
import xyz.varad.funpl.funPL.Declaration;
import xyz.varad.funpl.funPL.FunPLPackage;
import xyz.varad.funpl.funPL.ReferenceExpression;
import xyz.varad.funpl.funPL.Type;
import xyz.varad.funpl.funPL.TypeInferredElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reference Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xyz.varad.funpl.funPL.impl.ReferenceExpressionImpl#getReturnType <em>Return Type</em>}</li>
 *   <li>{@link xyz.varad.funpl.funPL.impl.ReferenceExpressionImpl#getArgumentList <em>Argument List</em>}</li>
 *   <li>{@link xyz.varad.funpl.funPL.impl.ReferenceExpressionImpl#getDeclaration <em>Declaration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReferenceExpressionImpl extends MinimalEObjectImpl.Container implements ReferenceExpression {
	/**
	 * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReturnType()
	 * @generated
	 * @ordered
	 */
	protected Type returnType;

	/**
	 * This is true if the Return Type containment reference has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	protected boolean returnTypeESet;

	/**
	 * The cached value of the '{@link #getArgumentList() <em>Argument List</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getArgumentList()
	 * @generated
	 * @ordered
	 */
	protected ArgumentList argumentList;

	/**
	 * This is true if the Argument List containment reference has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	protected boolean argumentListESet;

	/**
	 * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDeclaration()
	 * @generated
	 * @ordered
	 */
	protected Declaration declaration;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceExpressionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FunPLPackage.Literals.REFERENCE_EXPRESSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Type getReturnType() {
		return returnType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetReturnType(Type newReturnType, NotificationChain msgs) {
		Type oldReturnType = returnType;
		returnType = newReturnType;
		boolean oldReturnTypeESet = returnTypeESet;
		returnTypeESet = true;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, oldReturnType, newReturnType, !oldReturnTypeESet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setReturnType(Type newReturnType) {
		if (newReturnType != returnType) {
			NotificationChain msgs = null;
			if (returnType != null)
				msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, null, msgs);
			if (newReturnType != null)
				msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, null, msgs);
			msgs = basicSetReturnType(newReturnType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else {
			boolean oldReturnTypeESet = returnTypeESet;
			returnTypeESet = true;
			if (eNotificationRequired())
				eNotify(new ENotificationImpl(this, Notification.SET, FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, newReturnType, newReturnType, !oldReturnTypeESet));
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicUnsetReturnType(NotificationChain msgs) {
		Type oldReturnType = returnType;
		returnType = null;
		boolean oldReturnTypeESet = returnTypeESet;
		returnTypeESet = false;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.UNSET, FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, oldReturnType, null, oldReturnTypeESet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void unsetReturnType() {
		if (returnType != null) {
			NotificationChain msgs = null;
			msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, null, msgs);
			msgs = basicUnsetReturnType(msgs);
			if (msgs != null) msgs.dispatch();
		}
		else {
			boolean oldReturnTypeESet = returnTypeESet;
			returnTypeESet = false;
			if (eNotificationRequired())
				eNotify(new ENotificationImpl(this, Notification.UNSET, FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE, null, null, oldReturnTypeESet));
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isSetReturnType() {
		return returnTypeESet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArgumentList getArgumentList() {
		return argumentList;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetArgumentList(ArgumentList newArgumentList, NotificationChain msgs) {
		ArgumentList oldArgumentList = argumentList;
		argumentList = newArgumentList;
		boolean oldArgumentListESet = argumentListESet;
		argumentListESet = true;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, oldArgumentList, newArgumentList, !oldArgumentListESet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setArgumentList(ArgumentList newArgumentList) {
		if (newArgumentList != argumentList) {
			NotificationChain msgs = null;
			if (argumentList != null)
				msgs = ((InternalEObject)argumentList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, null, msgs);
			if (newArgumentList != null)
				msgs = ((InternalEObject)newArgumentList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, null, msgs);
			msgs = basicSetArgumentList(newArgumentList, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else {
			boolean oldArgumentListESet = argumentListESet;
			argumentListESet = true;
			if (eNotificationRequired())
				eNotify(new ENotificationImpl(this, Notification.SET, FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, newArgumentList, newArgumentList, !oldArgumentListESet));
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicUnsetArgumentList(NotificationChain msgs) {
		ArgumentList oldArgumentList = argumentList;
		argumentList = null;
		boolean oldArgumentListESet = argumentListESet;
		argumentListESet = false;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.UNSET, FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, oldArgumentList, null, oldArgumentListESet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void unsetArgumentList() {
		if (argumentList != null) {
			NotificationChain msgs = null;
			msgs = ((InternalEObject)argumentList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, null, msgs);
			msgs = basicUnsetArgumentList(msgs);
			if (msgs != null) msgs.dispatch();
		}
		else {
			boolean oldArgumentListESet = argumentListESet;
			argumentListESet = false;
			if (eNotificationRequired())
				eNotify(new ENotificationImpl(this, Notification.UNSET, FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST, null, null, oldArgumentListESet));
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isSetArgumentList() {
		return argumentListESet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Declaration getDeclaration() {
		if (declaration != null && declaration.eIsProxy()) {
			InternalEObject oldDeclaration = (InternalEObject)declaration;
			declaration = (Declaration)eResolveProxy(oldDeclaration);
			if (declaration != oldDeclaration) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FunPLPackage.REFERENCE_EXPRESSION__DECLARATION, oldDeclaration, declaration));
			}
		}
		return declaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Declaration basicGetDeclaration() {
		return declaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDeclaration(Declaration newDeclaration) {
		Declaration oldDeclaration = declaration;
		declaration = newDeclaration;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FunPLPackage.REFERENCE_EXPRESSION__DECLARATION, oldDeclaration, declaration));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE:
				return basicUnsetReturnType(msgs);
			case FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST:
				return basicUnsetArgumentList(msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE:
				return getReturnType();
			case FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST:
				return getArgumentList();
			case FunPLPackage.REFERENCE_EXPRESSION__DECLARATION:
				if (resolve) return getDeclaration();
				return basicGetDeclaration();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE:
				setReturnType((Type)newValue);
				return;
			case FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST:
				setArgumentList((ArgumentList)newValue);
				return;
			case FunPLPackage.REFERENCE_EXPRESSION__DECLARATION:
				setDeclaration((Declaration)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE:
				unsetReturnType();
				return;
			case FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST:
				unsetArgumentList();
				return;
			case FunPLPackage.REFERENCE_EXPRESSION__DECLARATION:
				setDeclaration((Declaration)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE:
				return isSetReturnType();
			case FunPLPackage.REFERENCE_EXPRESSION__ARGUMENT_LIST:
				return isSetArgumentList();
			case FunPLPackage.REFERENCE_EXPRESSION__DECLARATION:
				return declaration != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
		if (baseClass == TypeInferredElement.class) {
			switch (derivedFeatureID) {
				case FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE: return FunPLPackage.TYPE_INFERRED_ELEMENT__RETURN_TYPE;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
		if (baseClass == TypeInferredElement.class) {
			switch (baseFeatureID) {
				case FunPLPackage.TYPE_INFERRED_ELEMENT__RETURN_TYPE: return FunPLPackage.REFERENCE_EXPRESSION__RETURN_TYPE;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

} //ReferenceExpressionImpl
