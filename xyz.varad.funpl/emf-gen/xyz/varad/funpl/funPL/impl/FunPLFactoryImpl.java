/**
 * generated by Xtext 2.15.0
 */
package xyz.varad.funpl.funPL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xyz.varad.funpl.funPL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FunPLFactoryImpl extends EFactoryImpl implements FunPLFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static FunPLFactory init() {
		try {
			FunPLFactory theFunPLFactory = (FunPLFactory)EPackage.Registry.INSTANCE.getEFactory(FunPLPackage.eNS_URI);
			if (theFunPLFactory != null) {
				return theFunPLFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new FunPLFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunPLFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case FunPLPackage.FUN_PROGRAM: return createFunProgram();
			case FunPLPackage.VALUE_DECLARATION: return createValueDeclaration();
			case FunPLPackage.FUNCTION_DECLARATION: return createFunctionDeclaration();
			case FunPLPackage.PARAMETER_LIST: return createParameterList();
			case FunPLPackage.BLOCK: return createBlock();
			case FunPLPackage.RETURN_STATEMENT: return createReturnStatement();
			case FunPLPackage.INTEGER_LITERAL_EXPRESSION: return createIntegerLiteralExpression();
			case FunPLPackage.BOOLEAN_LITERAL_EXPRESSION: return createBooleanLiteralExpression();
			case FunPLPackage.PLUS_EXPRESSION: return createPlusExpression();
			case FunPLPackage.ASSIGNMENT_EXPRESSION: return createAssignmentExpression();
			case FunPLPackage.INTEGER_TYPE_DEFINITION: return createIntegerTypeDefinition();
			case FunPLPackage.BOOLEAN_TYPE_DEFINITION: return createBooleanTypeDefinition();
			case FunPLPackage.VOID_TYPE_DEFINITION: return createVoidTypeDefinition();
			case FunPLPackage.FUNCTION_TYPE_DEFINITION: return createFunctionTypeDefinition();
			case FunPLPackage.REFERENCE_EXPRESSION: return createReferenceExpression();
			case FunPLPackage.ARGUMENT_LIST: return createArgumentList();
			case FunPLPackage.FINAL_VALUE_DECLARATION: return createFinalValueDeclaration();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunProgram createFunProgram() {
		FunProgramImpl funProgram = new FunProgramImpl();
		return funProgram;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ValueDeclaration createValueDeclaration() {
		ValueDeclarationImpl valueDeclaration = new ValueDeclarationImpl();
		return valueDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunctionDeclaration createFunctionDeclaration() {
		FunctionDeclarationImpl functionDeclaration = new FunctionDeclarationImpl();
		return functionDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ParameterList createParameterList() {
		ParameterListImpl parameterList = new ParameterListImpl();
		return parameterList;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Block createBlock() {
		BlockImpl block = new BlockImpl();
		return block;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReturnStatement createReturnStatement() {
		ReturnStatementImpl returnStatement = new ReturnStatementImpl();
		return returnStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IntegerLiteralExpression createIntegerLiteralExpression() {
		IntegerLiteralExpressionImpl integerLiteralExpression = new IntegerLiteralExpressionImpl();
		return integerLiteralExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BooleanLiteralExpression createBooleanLiteralExpression() {
		BooleanLiteralExpressionImpl booleanLiteralExpression = new BooleanLiteralExpressionImpl();
		return booleanLiteralExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PlusExpression createPlusExpression() {
		PlusExpressionImpl plusExpression = new PlusExpressionImpl();
		return plusExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssignmentExpression createAssignmentExpression() {
		AssignmentExpressionImpl assignmentExpression = new AssignmentExpressionImpl();
		return assignmentExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IntegerTypeDefinition createIntegerTypeDefinition() {
		IntegerTypeDefinitionImpl integerTypeDefinition = new IntegerTypeDefinitionImpl();
		return integerTypeDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BooleanTypeDefinition createBooleanTypeDefinition() {
		BooleanTypeDefinitionImpl booleanTypeDefinition = new BooleanTypeDefinitionImpl();
		return booleanTypeDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VoidTypeDefinition createVoidTypeDefinition() {
		VoidTypeDefinitionImpl voidTypeDefinition = new VoidTypeDefinitionImpl();
		return voidTypeDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunctionTypeDefinition createFunctionTypeDefinition() {
		FunctionTypeDefinitionImpl functionTypeDefinition = new FunctionTypeDefinitionImpl();
		return functionTypeDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReferenceExpression createReferenceExpression() {
		ReferenceExpressionImpl referenceExpression = new ReferenceExpressionImpl();
		return referenceExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArgumentList createArgumentList() {
		ArgumentListImpl argumentList = new ArgumentListImpl();
		return argumentList;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FinalValueDeclaration createFinalValueDeclaration() {
		FinalValueDeclarationImpl finalValueDeclaration = new FinalValueDeclarationImpl();
		return finalValueDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunPLPackage getFunPLPackage() {
		return (FunPLPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static FunPLPackage getPackage() {
		return FunPLPackage.eINSTANCE;
	}

} //FunPLFactoryImpl
