grammar xyz.varad.funpl.FunPL hidden(WS, ML_COMMENT, SL_COMMENT)//with org.eclipse.xtext.common.Terminals

import "http://www.varad.xyz/funpl/FunPL"
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore


FunProgram:
	('package' name=QualifiedName ';')?
	elements+=AbstractElement*
;

AbstractElement:
	Declaration
;

Declaration:
	OuterValueDeclaration | FunctionDeclaration
;

OuterValueDeclaration returns ValueDeclaration:
	ValueDeclaration ';'
;

ValueDeclaration returns ValueDeclaration:
	{ValueDeclaration}
	((constant?='const' | 'var') (declaredType=Type)? name=ID ('=' expression=Expression)?)
;

ParameterDeclaration returns ValueDeclaration:
	{FinalValueDeclaration}
	declaredType=Type name=ID ("=" expression=Expression)?
;

FunctionDeclaration returns FunctionDeclaration:
	{FunctionDeclaration}
	'function' (declaredType=Type)? name=ID
	parameterList=ParameterList
	body=Block
;

ParameterList returns ParameterList:
	{ParameterList}
	'(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')' 
;

Block returns Block:
	{Block}
	'{'
		statements+=Statement*
	'}'
;

Statement:
	(ValueDeclaration | Expression | ReturnStatement)';'
;

ReturnStatement returns ReturnStatement:
	{ReturnStatement}
	'return' (expression=Expression)?
;

ArgumentList returns ArgumentList:
	{ArgumentList}
	'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
;

/**
 * ///////////////////////////////////////////////////////////////////
 * Expression language
 * ///////////////////////////////////////////////////////////////////
 */

Expression:
	AssignmentExpression
;

AssignmentExpression returns Expression:
	PlusExpression({AssignmentExpression.left=current} '=' right=Expression)?
;

PlusExpression returns Expression:
	PrimaryExpression({PlusExpression.left=current} '+' right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
	'(' Expression ')' |
	TerminalExpression
;

TerminalExpression returns Expression:
	ReferenceExpression | LiteralExpression
;

ReferenceExpression returns Expression:
	{ReferenceExpression}
	declaration=[Declaration|QualifiedName]
	(argumentList=ArgumentList)?
;

LiteralExpression returns Expression:
	{IntegerLiteralExpression} value=INTEGER |
	{BooleanLiteralExpression} value=BOOLEAN
;

terminal INTEGER returns Ecore::EInt:
	('-'? ('0'..'9'))+
;

terminal BOOLEAN returns Ecore::EBoolean:
	('true')+ | ('false')+
;

terminal ID: 
	'^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;
//terminal STRING:
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
//			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
//		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS         : (' '|'\t'|'\r'|'\n')+;
terminal ANY_OTHER: .;

/**
 * ///////////////////////////////////////////////////////////////////
 * Type Language
 * ///////////////////////////////////////////////////////////////////
 */
 
Type:
	TypeDefinition
; 

TypeDefinition:
	IntegerTypeDefinition |
	BooleanTypeDefinition |
	VoidTypeDefinition
;

IntegerTypeDefinition returns BasicTypeDefinition:
	{IntegerTypeDefinition} 'int'
;

BooleanTypeDefinition returns BasicTypeDefinition:
	{BooleanTypeDefinition} 'bool'
;

VoidTypeDefinition returns BasicTypeDefinition:
	{VoidTypeDefinition} 'void'
;

/**
 * ///////////////////////////////////////////////////////////////////
 * Scoping
 * ///////////////////////////////////////////////////////////////////
 */
 
QualifiedName:
	ID ('.' ID)*
;