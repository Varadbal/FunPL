/*
 * generated by Xtext 2.15.0
 */
grammar InternalFunPL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xyz.varad.funpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xyz.varad.funpl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xyz.varad.funpl.services.FunPLGrammarAccess;

}

@parser::members {

 	private FunPLGrammarAccess grammarAccess;

    public InternalFunPLParser(TokenStream input, FunPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FunProgram";
   	}

   	@Override
   	protected FunPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFunProgram
entryRuleFunProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunProgramRule()); }
	iv_ruleFunProgram=ruleFunProgram
	{ $current=$iv_ruleFunProgram.current; }
	EOF;

// Rule FunProgram
ruleFunProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='package'
			{
				newLeafNode(otherlv_0, grammarAccess.getFunProgramAccess().getPackageKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunProgramAccess().getNameQualifiedNameParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunProgramRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"xyz.varad.funpl.FunPL.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFunProgramAccess().getSemicolonKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunProgramAccess().getElementsAbstractElementParserRuleCall_1_0());
				}
				lv_elements_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunProgramRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"xyz.varad.funpl.FunPL.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAbstractElementAccess().getDeclarationParserRuleCall());
	}
	this_Declaration_0=ruleDeclaration
	{
		$current = $this_Declaration_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getOuterValueDeclarationParserRuleCall_0());
		}
		this_OuterValueDeclaration_0=ruleOuterValueDeclaration
		{
			$current = $this_OuterValueDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_1());
		}
		this_FunctionDeclaration_1=ruleFunctionDeclaration
		{
			$current = $this_FunctionDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOuterValueDeclaration
entryRuleOuterValueDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOuterValueDeclarationRule()); }
	iv_ruleOuterValueDeclaration=ruleOuterValueDeclaration
	{ $current=$iv_ruleOuterValueDeclaration.current; }
	EOF;

// Rule OuterValueDeclaration
ruleOuterValueDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOuterValueDeclarationAccess().getValueDeclarationParserRuleCall_0());
		}
		this_ValueDeclaration_0=ruleValueDeclaration
		{
			$current = $this_ValueDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getOuterValueDeclarationAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleValueDeclaration
entryRuleValueDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueDeclarationRule()); }
	iv_ruleValueDeclaration=ruleValueDeclaration
	{ $current=$iv_ruleValueDeclaration.current; }
	EOF;

// Rule ValueDeclaration
ruleValueDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueDeclarationAccess().getValueDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						lv_constant_1_0='const'
						{
							newLeafNode(lv_constant_1_0, grammarAccess.getValueDeclarationAccess().getConstantConstKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueDeclarationRule());
							}
							setWithLastConsumed($current, "constant", true, "const");
						}
					)
				)
				    |
				otherlv_2='var'
				{
					newLeafNode(otherlv_2, grammarAccess.getValueDeclarationAccess().getVarKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getValueDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_1_0());
					}
					lv_declaredType_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueDeclarationRule());
						}
						set(
							$current,
							"declaredType",
							lv_declaredType_3_0,
							"xyz.varad.funpl.FunPL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getValueDeclarationAccess().getNameIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueDeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"xyz.varad.funpl.FunPL.ID");
					}
				)
			)
			(
				otherlv_5='='
				{
					newLeafNode(otherlv_5, grammarAccess.getValueDeclarationAccess().getEqualsSignKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValueDeclarationAccess().getExpressionExpressionParserRuleCall_1_3_1_0());
						}
						lv_expression_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueDeclarationRule());
							}
							set(
								$current,
								"expression",
								lv_expression_6_0,
								"xyz.varad.funpl.FunPL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	iv_ruleParameterDeclaration=ruleParameterDeclaration
	{ $current=$iv_ruleParameterDeclaration.current; }
	EOF;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterDeclarationAccess().getFinalValueDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_0());
				}
				lv_declaredType_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
					}
					set(
						$current,
						"declaredType",
						lv_declaredType_1_0,
						"xyz.varad.funpl.FunPL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"xyz.varad.funpl.FunPL.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"xyz.varad.funpl.FunPL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_ruleFunctionDeclaration=ruleFunctionDeclaration
	{ $current=$iv_ruleFunctionDeclaration.current; }
	EOF;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeTypeParserRuleCall_2_0());
				}
				lv_declaredType_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"declaredType",
						lv_declaredType_2_0,
						"xyz.varad.funpl.FunPL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"xyz.varad.funpl.FunPL.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_4_0());
				}
				lv_parameterList_4_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_4_0,
						"xyz.varad.funpl.FunPL.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_5_0());
				}
				lv_body_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"xyz.varad.funpl.FunPL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterListAccess().getParameterListAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleParameterDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"xyz.varad.funpl.FunPL.ParameterDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getParameterListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleParameterDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterListRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"xyz.varad.funpl.FunPL.ParameterDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"xyz.varad.funpl.FunPL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getValueDeclarationParserRuleCall_0_0());
			}
			this_ValueDeclaration_0=ruleValueDeclaration
			{
				$current = $this_ValueDeclaration_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_2());
			}
			this_ReturnStatement_2=ruleReturnStatement
			{
				$current = $this_ReturnStatement_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"xyz.varad.funpl.FunPL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	iv_ruleArgumentList=ruleArgumentList
	{ $current=$iv_ruleArgumentList.current; }
	EOF;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArgumentListAccess().getArgumentListAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentListRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"xyz.varad.funpl.FunPL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArgumentListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_1_1_0());
						}
						lv_arguments_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArgumentListRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"xyz.varad.funpl.FunPL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall());
	}
	this_AssignmentExpression_0=ruleAssignmentExpression
	{
		$current = $this_AssignmentExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPlusExpressionParserRuleCall_0());
		}
		this_PlusExpression_0=rulePlusExpression
		{
			$current = $this_PlusExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"xyz.varad.funpl.FunPL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePlusExpression
entryRulePlusExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusExpressionRule()); }
	iv_rulePlusExpression=rulePlusExpression
	{ $current=$iv_rulePlusExpression.current; }
	EOF;

// Rule PlusExpression
rulePlusExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusExpressionAccess().getPlusExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getPlusExpressionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"xyz.varad.funpl.FunPL.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTerminalExpressionParserRuleCall_1());
		}
		this_TerminalExpression_3=ruleTerminalExpression
		{
			$current = $this_TerminalExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getReferenceExpressionParserRuleCall_0());
		}
		this_ReferenceExpression_0=ruleReferenceExpression
		{
			$current = $this_ReferenceExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_1());
		}
		this_LiteralExpression_1=ruleLiteralExpression
		{
			$current = $this_LiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReferenceExpression
entryRuleReferenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceExpressionRule()); }
	iv_ruleReferenceExpression=ruleReferenceExpression
	{ $current=$iv_ruleReferenceExpression.current; }
	EOF;

// Rule ReferenceExpression
ruleReferenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReferenceExpressionAccess().getReferenceExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceExpressionAccess().getArgumentListArgumentListParserRuleCall_2_0());
				}
				lv_argumentList_2_0=ruleArgumentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceExpressionRule());
					}
					set(
						$current,
						"argumentList",
						lv_argumentList_2_0,
						"xyz.varad.funpl.FunPL.ArgumentList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INTEGER
					{
						newLeafNode(lv_value_1_0, grammarAccess.getLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"xyz.varad.funpl.FunPL.INTEGER");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_BOOLEAN
					{
						newLeafNode(lv_value_3_0, grammarAccess.getLiteralExpressionAccess().getValueBOOLEANTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"xyz.varad.funpl.FunPL.BOOLEAN");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall());
	}
	this_TypeDefinition_0=ruleTypeDefinition
	{
		$current = $this_TypeDefinition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	iv_ruleTypeDefinition=ruleTypeDefinition
	{ $current=$iv_ruleTypeDefinition.current; }
	EOF;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_0());
		}
		this_IntegerTypeDefinition_0=ruleIntegerTypeDefinition
		{
			$current = $this_IntegerTypeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_1());
		}
		this_BooleanTypeDefinition_1=ruleBooleanTypeDefinition
		{
			$current = $this_BooleanTypeDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getVoidTypeDefinitionParserRuleCall_2());
		}
		this_VoidTypeDefinition_2=ruleVoidTypeDefinition
		{
			$current = $this_VoidTypeDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerTypeDefinition
entryRuleIntegerTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerTypeDefinitionRule()); }
	iv_ruleIntegerTypeDefinition=ruleIntegerTypeDefinition
	{ $current=$iv_ruleIntegerTypeDefinition.current; }
	EOF;

// Rule IntegerTypeDefinition
ruleIntegerTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerTypeDefinitionAccess().getIntKeyword_1());
		}
	)
;

// Entry rule entryRuleBooleanTypeDefinition
entryRuleBooleanTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanTypeDefinitionRule()); }
	iv_ruleBooleanTypeDefinition=ruleBooleanTypeDefinition
	{ $current=$iv_ruleBooleanTypeDefinition.current; }
	EOF;

// Rule BooleanTypeDefinition
ruleBooleanTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanTypeDefinitionAccess().getBoolKeyword_1());
		}
	)
;

// Entry rule entryRuleVoidTypeDefinition
entryRuleVoidTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoidTypeDefinitionRule()); }
	iv_ruleVoidTypeDefinition=ruleVoidTypeDefinition
	{ $current=$iv_ruleVoidTypeDefinition.current; }
	EOF;

// Rule VoidTypeDefinition
ruleVoidTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVoidTypeDefinitionAccess().getVoidTypeDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='void'
		{
			newLeafNode(otherlv_1, grammarAccess.getVoidTypeDefinitionAccess().getVoidKeyword_1());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_INTEGER : ('-'? '0'..'9')+;

RULE_BOOLEAN : ('true'+|'false'+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
