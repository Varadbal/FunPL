/*
 * generated by Xtext 2.14.0
 */
grammar InternalFunPL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xyz.varad.funpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xyz.varad.funpl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xyz.varad.funpl.services.FunPLGrammarAccess;

}

@parser::members {

 	private FunPLGrammarAccess grammarAccess;

    public InternalFunPLParser(TokenStream input, FunPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FunProgram";
   	}

   	@Override
   	protected FunPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFunProgram
entryRuleFunProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunProgramRule()); }
	iv_ruleFunProgram=ruleFunProgram
	{ $current=$iv_ruleFunProgram.current; }
	EOF;

// Rule FunProgram
ruleFunProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunProgramAccess().getElementsFunAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleFunAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFunProgramRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"xyz.varad.funpl.FunPL.FunAbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFunAbstractElement
entryRuleFunAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunAbstractElementRule()); }
	iv_ruleFunAbstractElement=ruleFunAbstractElement
	{ $current=$iv_ruleFunAbstractElement.current; }
	EOF;

// Rule FunAbstractElement
ruleFunAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunAbstractElementAccess().getFunVarDeclarationParserRuleCall_0());
		}
		this_FunVarDeclaration_0=ruleFunVarDeclaration
		{
			$current = $this_FunVarDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunAbstractElementAccess().getFunMethodParserRuleCall_1());
		}
		this_FunMethod_1=ruleFunMethod
		{
			$current = $this_FunMethod_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunVarDeclaration
entryRuleFunVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunVarDeclarationRule()); }
	iv_ruleFunVarDeclaration=ruleFunVarDeclaration
	{ $current=$iv_ruleFunVarDeclaration.current; }
	EOF;

// Rule FunVarDeclaration
ruleFunVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunVarDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunVarDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunVarDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getFunVarDeclarationAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunVarDeclarationAccess().getValueFunExpressionParserRuleCall_2_1_0());
					}
					lv_value_3_0=ruleFunExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunVarDeclarationRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"xyz.varad.funpl.FunPL.FunExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFunMethod
entryRuleFunMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunMethodRule()); }
	iv_ruleFunMethod=ruleFunMethod
	{ $current=$iv_ruleFunMethod.current; }
	EOF;

// Rule FunMethod
ruleFunMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='method'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunMethodAccess().getMethodKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunMethodAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_0_0());
					}
					lv_params_3_0=ruleFunParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunMethodRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"xyz.varad.funpl.FunPL.FunParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getFunMethodAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_1_1_0());
						}
						lv_params_5_0=ruleFunParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunMethodRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"xyz.varad.funpl.FunPL.FunParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunMethodAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunMethodAccess().getBodyFunBlockParserRuleCall_5_0());
				}
				lv_body_7_0=ruleFunBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunMethodRule());
					}
					set(
						$current,
						"body",
						lv_body_7_0,
						"xyz.varad.funpl.FunPL.FunBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunBlock
entryRuleFunBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunBlockRule()); }
	iv_ruleFunBlock=ruleFunBlock
	{ $current=$iv_ruleFunBlock.current; }
	EOF;

// Rule FunBlock
ruleFunBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunBlockAccess().getFunBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunBlockAccess().getStatementsFunStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleFunStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"xyz.varad.funpl.FunPL.FunStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFunParameter
entryRuleFunParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunParameterRule()); }
	iv_ruleFunParameter=ruleFunParameter
	{ $current=$iv_ruleFunParameter.current; }
	EOF;

// Rule FunParameter
ruleFunParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunStatement
entryRuleFunStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunStatementRule()); }
	iv_ruleFunStatement=ruleFunStatement
	{ $current=$iv_ruleFunStatement.current; }
	EOF;

// Rule FunStatement
ruleFunStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunStatementAccess().getFunVarDeclarationParserRuleCall_0());
		}
		this_FunVarDeclaration_0=ruleFunVarDeclaration
		{
			$current = $this_FunVarDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunStatementAccess().getFunExpressionParserRuleCall_1());
		}
		this_FunExpression_1=ruleFunExpression
		{
			$current = $this_FunExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunExpression
entryRuleFunExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunExpressionRule()); }
	iv_ruleFunExpression=ruleFunExpression
	{ $current=$iv_ruleFunExpression.current; }
	EOF;

// Rule FunExpression
ruleFunExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunExpressionAccess().getFunPlusParserRuleCall());
	}
	this_FunPlus_0=ruleFunPlus
	{
		$current = $this_FunPlus_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunPlus
entryRuleFunPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunPlusRule()); }
	iv_ruleFunPlus=ruleFunPlus
	{ $current=$iv_ruleFunPlus.current; }
	EOF;

// Rule FunPlus
ruleFunPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunPlusAccess().getFunPrimaryParserRuleCall_0());
		}
		this_FunPrimary_0=ruleFunPrimary
		{
			$current = $this_FunPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFunPlusAccess().getFunPlusLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getFunPlusAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunPlusAccess().getRightFunPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleFunPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunPlusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"xyz.varad.funpl.FunPL.FunPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFunPrimary
entryRuleFunPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunPrimaryRule()); }
	iv_ruleFunPrimary=ruleFunPrimary
	{ $current=$iv_ruleFunPrimary.current; }
	EOF;

// Rule FunPrimary
ruleFunPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFunPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getFunPrimaryAccess().getFunExpressionParserRuleCall_0_1());
			}
			this_FunExpression_1=ruleFunExpression
			{
				$current = $this_FunExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getFunPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getFunPrimaryAccess().getFunAtomicParserRuleCall_1());
		}
		this_FunAtomic_3=ruleFunAtomic
		{
			$current = $this_FunAtomic_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunAtomic
entryRuleFunAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunAtomicRule()); }
	iv_ruleFunAtomic=ruleFunAtomic
	{ $current=$iv_ruleFunAtomic.current; }
	EOF;

// Rule FunAtomic
ruleFunAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunAtomicAccess().getStringConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_STRING
					{
						newLeafNode(lv_value_1_0, grammarAccess.getFunAtomicAccess().getValueSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunAtomicAccess().getIntConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getFunAtomicAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
