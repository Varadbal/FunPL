/*
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.validation

import org.eclipse.xtext.validation.Check
import com.google.inject.Inject
import xyz.varad.funpl.util.FunPLModelUtil
import xyz.varad.funpl.funPL.FunPLPackage
import xyz.varad.funpl.funPL.SymbolRef
import xyz.varad.funpl.funPL.Symbol

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FunPLValidator extends AbstractFunPLValidator {
	// TODO duplicate variable
	// TODO const reassignment
	// TODO const must be initialized
	// TODO function call #args=#params
	// TODO disable def. references in global scope???
	
	static val ISSUE_CODE_PREFIX = "xyz.varad.funpl."
	public static val FORWARD_REFERENCE = ISSUE_CODE_PREFIX + "ForwardReference"
	public static val SYMBOL_REDEFINITION = ISSUE_CODE_PREFIX + "SymbolRedefinition"
	
	
	@Inject extension FunPLModelUtil
	
	@Check
	def void checkForwardReference(SymbolRef _sym){
		val symbol = _sym.symbol
		if(symbol !== null && !_sym.isDefinedBefore){
			error("Symbol forward reference not allowed: '" + symbol.name + "'",
				FunPLPackage::eINSTANCE.symbolRef_Symbol,
				FORWARD_REFERENCE,
				symbol.name
			)
		}
	}
	
	/*@Check
	def void checkSymbolRedefinition(Symbol _s){
		if(_s.isDefinedBefore)
			error("Symbol redefinition not allowed: '" + _s.name + "'",
				FunPLPackage::eINSTANCE.symbolRef_Symbol,
				SYMBOL_REDEFINITION,
				_s.name
			)
	}*/
	
}
