grammar xyz.varad.funpl.FunPL with org.eclipse.xtext.common.Terminals

generate funPL "http://www.varad.xyz/funpl/FunPL"

//TODO add Block(ed)-Element (e.g. Function, Class, If, etc.) for easier validation? (like Symbol)
//TODO TypeReference in Type when adding Class, Struct, etc.

////////////////Elements of the program code /////////////////////////////////
FunProgram:
	elements+=AbstractElement*
;

AbstractElement:
	Definition
;

Symbol: //=Named and typed element
	Definition | FunctionParam
;

Definition:
	Value | Function
;

Value:
	(const?='const' | 'var') (type=Type)? name=ID ('=' expression=Expression)? ';'
;

Function:
	'function' type=FunctionReferenceTypeDefinition (returnType=Type)? name=ID 
	'(' (params+=FunctionParam (',' params+=FunctionParam)* )? ')' 
	body=Block
;

FunctionParam:
	type=Type
	name=ID
;

Block:
	'{'
	{Block} statements+=Statement*
	'}'
;

Statement:
	Value | (Expression ';') | ReturnStatement
;

ReturnStatement:
	{ReturnStatement} 'return' (expression=Expression)? ';'
;

//////////////////////////////Types////////////////////////////////////////////
Type:
	TypeDefinition
;

TypeDefinition:
	IntTypeDefinition |
	BoolTypeDefinition |
	StringTypeDefinition
;

IntTypeDefinition:
	{IntTypeDefinition} 'int'
;

BoolTypeDefinition:
	{BoolTypeDefinition} 'bool'
;

StringTypeDefinition:
	{StringTypeDefinition} 'string'
;

FunctionReferenceTypeDefinition returns Type:
	{FunctionReferenceTypeDefinition}
;

VoidTypeDefinition returns TypeDefinition:
	{VoidTypeDefinition}
;

//////////////////////////////Expressions////////////////////////////////////
Expression:
	Assignment
;

Assignment returns Expression:
	Plus({Assignment.left=current} '=' right=Expression)?
;

Plus returns Expression:
	PrimaryExpression({Plus.left=current} '+' right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
	'(' Expression ')' |
	FunctionCall |
	TerminalExpression
;

FunctionCall returns Expression:
	{FunctionCall} function=[Function] '(' (args+=Expression (',' args+=Expression)*)? ')'
;

TerminalExpression returns Expression:
	{IntConstant} value=INT | 
	{StringConstant} value=STRING |
	{BoolConstant} value=('true'|'false') |
	{SymbolRef} symbol=[Symbol]
;

