/**
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.funPL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xyz.varad.funpl.funPL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FunPLFactoryImpl extends EFactoryImpl implements FunPLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FunPLFactory init()
  {
    try
    {
      FunPLFactory theFunPLFactory = (FunPLFactory)EPackage.Registry.INSTANCE.getEFactory(FunPLPackage.eNS_URI);
      if (theFunPLFactory != null)
      {
        return theFunPLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FunPLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunPLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FunPLPackage.FUN_PROGRAM: return createFunProgram();
      case FunPLPackage.FUN_ABSTRACT_ELEMENT: return createFunAbstractElement();
      case FunPLPackage.FUN_VAR_DECLARATION: return createFunVarDeclaration();
      case FunPLPackage.FUN_METHOD: return createFunMethod();
      case FunPLPackage.FUN_BLOCK: return createFunBlock();
      case FunPLPackage.FUN_PARAMETER: return createFunParameter();
      case FunPLPackage.FUN_STATEMENT: return createFunStatement();
      case FunPLPackage.FUN_EXPRESSION: return createFunExpression();
      case FunPLPackage.FUN_ATOMIC: return createFunAtomic();
      case FunPLPackage.FUN_PLUS: return createFunPlus();
      case FunPLPackage.STRING_CONSTANT: return createStringConstant();
      case FunPLPackage.INT_CONSTANT: return createIntConstant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunProgram createFunProgram()
  {
    FunProgramImpl funProgram = new FunProgramImpl();
    return funProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunAbstractElement createFunAbstractElement()
  {
    FunAbstractElementImpl funAbstractElement = new FunAbstractElementImpl();
    return funAbstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunVarDeclaration createFunVarDeclaration()
  {
    FunVarDeclarationImpl funVarDeclaration = new FunVarDeclarationImpl();
    return funVarDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunMethod createFunMethod()
  {
    FunMethodImpl funMethod = new FunMethodImpl();
    return funMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunBlock createFunBlock()
  {
    FunBlockImpl funBlock = new FunBlockImpl();
    return funBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunParameter createFunParameter()
  {
    FunParameterImpl funParameter = new FunParameterImpl();
    return funParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunStatement createFunStatement()
  {
    FunStatementImpl funStatement = new FunStatementImpl();
    return funStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunExpression createFunExpression()
  {
    FunExpressionImpl funExpression = new FunExpressionImpl();
    return funExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunAtomic createFunAtomic()
  {
    FunAtomicImpl funAtomic = new FunAtomicImpl();
    return funAtomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunPlus createFunPlus()
  {
    FunPlusImpl funPlus = new FunPlusImpl();
    return funPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunPLPackage getFunPLPackage()
  {
    return (FunPLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FunPLPackage getPackage()
  {
    return FunPLPackage.eINSTANCE;
  }

} //FunPLFactoryImpl
