/**
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.funPL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xyz.varad.funpl.funPL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xyz.varad.funpl.funPL.FunPLPackage
 * @generated
 */
public class FunPLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FunPLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunPLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FunPLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunPLSwitch<Adapter> modelSwitch =
    new FunPLSwitch<Adapter>()
    {
      @Override
      public Adapter caseFunProgram(FunProgram object)
      {
        return createFunProgramAdapter();
      }
      @Override
      public Adapter caseFunAbstractElement(FunAbstractElement object)
      {
        return createFunAbstractElementAdapter();
      }
      @Override
      public Adapter caseFunVarDeclaration(FunVarDeclaration object)
      {
        return createFunVarDeclarationAdapter();
      }
      @Override
      public Adapter caseFunMethod(FunMethod object)
      {
        return createFunMethodAdapter();
      }
      @Override
      public Adapter caseFunBlock(FunBlock object)
      {
        return createFunBlockAdapter();
      }
      @Override
      public Adapter caseFunParameter(FunParameter object)
      {
        return createFunParameterAdapter();
      }
      @Override
      public Adapter caseFunStatement(FunStatement object)
      {
        return createFunStatementAdapter();
      }
      @Override
      public Adapter caseFunExpression(FunExpression object)
      {
        return createFunExpressionAdapter();
      }
      @Override
      public Adapter caseFunAtomic(FunAtomic object)
      {
        return createFunAtomicAdapter();
      }
      @Override
      public Adapter caseFunPlus(FunPlus object)
      {
        return createFunPlusAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunProgram <em>Fun Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunProgram
   * @generated
   */
  public Adapter createFunProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunAbstractElement <em>Fun Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunAbstractElement
   * @generated
   */
  public Adapter createFunAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunVarDeclaration <em>Fun Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunVarDeclaration
   * @generated
   */
  public Adapter createFunVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunMethod <em>Fun Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunMethod
   * @generated
   */
  public Adapter createFunMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunBlock <em>Fun Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunBlock
   * @generated
   */
  public Adapter createFunBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunParameter <em>Fun Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunParameter
   * @generated
   */
  public Adapter createFunParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunStatement <em>Fun Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunStatement
   * @generated
   */
  public Adapter createFunStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunExpression <em>Fun Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunExpression
   * @generated
   */
  public Adapter createFunExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunAtomic <em>Fun Atomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunAtomic
   * @generated
   */
  public Adapter createFunAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.FunPlus <em>Fun Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.FunPlus
   * @generated
   */
  public Adapter createFunPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xyz.varad.funpl.funPL.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xyz.varad.funpl.funPL.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FunPLAdapterFactory
