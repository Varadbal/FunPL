/*
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xyz.varad.funpl.funPL.Assignment;
import xyz.varad.funpl.funPL.Block;
import xyz.varad.funpl.funPL.BoolConstant;
import xyz.varad.funpl.funPL.BoolTypeDefinition;
import xyz.varad.funpl.funPL.FunPLPackage;
import xyz.varad.funpl.funPL.FunProgram;
import xyz.varad.funpl.funPL.Function;
import xyz.varad.funpl.funPL.FunctionCall;
import xyz.varad.funpl.funPL.FunctionParam;
import xyz.varad.funpl.funPL.FunctionReferenceTypeDefinition;
import xyz.varad.funpl.funPL.IntConstant;
import xyz.varad.funpl.funPL.IntTypeDefinition;
import xyz.varad.funpl.funPL.Plus;
import xyz.varad.funpl.funPL.ReturnStatement;
import xyz.varad.funpl.funPL.StringConstant;
import xyz.varad.funpl.funPL.StringTypeDefinition;
import xyz.varad.funpl.funPL.SymbolRef;
import xyz.varad.funpl.funPL.Value;
import xyz.varad.funpl.funPL.VoidTypeDefinition;
import xyz.varad.funpl.services.FunPLGrammarAccess;

@SuppressWarnings("all")
public class FunPLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FunPLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FunPLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FunPLPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case FunPLPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case FunPLPackage.BOOL_CONSTANT:
				sequence_TerminalExpression(context, (BoolConstant) semanticObject); 
				return; 
			case FunPLPackage.BOOL_TYPE_DEFINITION:
				sequence_BoolTypeDefinition(context, (BoolTypeDefinition) semanticObject); 
				return; 
			case FunPLPackage.FUN_PROGRAM:
				sequence_FunProgram(context, (FunProgram) semanticObject); 
				return; 
			case FunPLPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case FunPLPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case FunPLPackage.FUNCTION_PARAM:
				sequence_FunctionParam(context, (FunctionParam) semanticObject); 
				return; 
			case FunPLPackage.FUNCTION_REFERENCE_TYPE_DEFINITION:
				sequence_FunctionReferenceTypeDefinition(context, (FunctionReferenceTypeDefinition) semanticObject); 
				return; 
			case FunPLPackage.INT_CONSTANT:
				sequence_TerminalExpression(context, (IntConstant) semanticObject); 
				return; 
			case FunPLPackage.INT_TYPE_DEFINITION:
				sequence_IntTypeDefinition(context, (IntTypeDefinition) semanticObject); 
				return; 
			case FunPLPackage.PLUS:
				sequence_Plus(context, (Plus) semanticObject); 
				return; 
			case FunPLPackage.RETURN_STATEMENT:
				sequence_ReturnStatement(context, (ReturnStatement) semanticObject); 
				return; 
			case FunPLPackage.STRING_CONSTANT:
				sequence_TerminalExpression(context, (StringConstant) semanticObject); 
				return; 
			case FunPLPackage.STRING_TYPE_DEFINITION:
				sequence_StringTypeDefinition(context, (StringTypeDefinition) semanticObject); 
				return; 
			case FunPLPackage.SYMBOL_REF:
				sequence_TerminalExpression(context, (SymbolRef) semanticObject); 
				return; 
			case FunPLPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case FunPLPackage.VOID_TYPE_DEFINITION:
				sequence_VoidTypeDefinition(context, (VoidTypeDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Assignment
	 *     Expression returns Assignment
	 *     Assignment returns Assignment
	 *     Assignment.Assignment_1_0 returns Assignment
	 *     Plus returns Assignment
	 *     Plus.Plus_1_0 returns Assignment
	 *     PrimaryExpression returns Assignment
	 *
	 * Constraint:
	 *     (left=Assignment_Assignment_1_0 right=Expression)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.ASSIGNMENT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.ASSIGNMENT__LEFT));
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.ASSIGNMENT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.ASSIGNMENT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getAssignmentLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     statements+=Statement*
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns BoolTypeDefinition
	 *     TypeDefinition returns BoolTypeDefinition
	 *     BoolTypeDefinition returns BoolTypeDefinition
	 *
	 * Constraint:
	 *     {BoolTypeDefinition}
	 */
	protected void sequence_BoolTypeDefinition(ISerializationContext context, BoolTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunProgram returns FunProgram
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_FunProgram(ISerializationContext context, FunProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns FunctionCall
	 *     Expression returns FunctionCall
	 *     Assignment returns FunctionCall
	 *     Assignment.Assignment_1_0 returns FunctionCall
	 *     Plus returns FunctionCall
	 *     Plus.Plus_1_0 returns FunctionCall
	 *     PrimaryExpression returns FunctionCall
	 *     FunctionCall returns FunctionCall
	 *
	 * Constraint:
	 *     (function=[Function|ID] (args+=Expression args+=Expression*)?)
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FunctionParam
	 *     FunctionParam returns FunctionParam
	 *
	 * Constraint:
	 *     (type=Type name=ID)
	 */
	protected void sequence_FunctionParam(ISerializationContext context, FunctionParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.SYMBOL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.SYMBOL__TYPE));
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.SYMBOL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionParamAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFunctionParamAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionReferenceTypeDefinition returns FunctionReferenceTypeDefinition
	 *
	 * Constraint:
	 *     {FunctionReferenceTypeDefinition}
	 */
	protected void sequence_FunctionReferenceTypeDefinition(ISerializationContext context, FunctionReferenceTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Function
	 *     Symbol returns Function
	 *     Definition returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (type=FunctionReferenceTypeDefinition returnType=Type? name=ID (params+=FunctionParam params+=FunctionParam*)? body=Block)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns IntTypeDefinition
	 *     TypeDefinition returns IntTypeDefinition
	 *     IntTypeDefinition returns IntTypeDefinition
	 *
	 * Constraint:
	 *     {IntTypeDefinition}
	 */
	protected void sequence_IntTypeDefinition(ISerializationContext context, IntTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Plus
	 *     Expression returns Plus
	 *     Assignment returns Plus
	 *     Assignment.Assignment_1_0 returns Plus
	 *     Plus returns Plus
	 *     Plus.Plus_1_0 returns Plus
	 *     PrimaryExpression returns Plus
	 *
	 * Constraint:
	 *     (left=Plus_Plus_1_0 right=PrimaryExpression)
	 */
	protected void sequence_Plus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusAccess().getPlusLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ReturnStatement
	 *     ReturnStatement returns ReturnStatement
	 *
	 * Constraint:
	 *     expression=Expression?
	 */
	protected void sequence_ReturnStatement(ISerializationContext context, ReturnStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns StringTypeDefinition
	 *     TypeDefinition returns StringTypeDefinition
	 *     StringTypeDefinition returns StringTypeDefinition
	 *
	 * Constraint:
	 *     {StringTypeDefinition}
	 */
	protected void sequence_StringTypeDefinition(ISerializationContext context, StringTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns BoolConstant
	 *     Expression returns BoolConstant
	 *     Assignment returns BoolConstant
	 *     Assignment.Assignment_1_0 returns BoolConstant
	 *     Plus returns BoolConstant
	 *     Plus.Plus_1_0 returns BoolConstant
	 *     PrimaryExpression returns BoolConstant
	 *     TerminalExpression returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IntConstant
	 *     Expression returns IntConstant
	 *     Assignment returns IntConstant
	 *     Assignment.Assignment_1_0 returns IntConstant
	 *     Plus returns IntConstant
	 *     Plus.Plus_1_0 returns IntConstant
	 *     PrimaryExpression returns IntConstant
	 *     TerminalExpression returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns StringConstant
	 *     Expression returns StringConstant
	 *     Assignment returns StringConstant
	 *     Assignment.Assignment_1_0 returns StringConstant
	 *     Plus returns StringConstant
	 *     Plus.Plus_1_0 returns StringConstant
	 *     PrimaryExpression returns StringConstant
	 *     TerminalExpression returns StringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SymbolRef
	 *     Expression returns SymbolRef
	 *     Assignment returns SymbolRef
	 *     Assignment.Assignment_1_0 returns SymbolRef
	 *     Plus returns SymbolRef
	 *     Plus.Plus_1_0 returns SymbolRef
	 *     PrimaryExpression returns SymbolRef
	 *     TerminalExpression returns SymbolRef
	 *
	 * Constraint:
	 *     symbol=[Symbol|ID]
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, SymbolRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.SYMBOL_REF__SYMBOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.SYMBOL_REF__SYMBOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getSymbolSymbolIDTerminalRuleCall_3_1_0_1(), semanticObject.eGet(FunPLPackage.Literals.SYMBOL_REF__SYMBOL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Value
	 *     Symbol returns Value
	 *     Definition returns Value
	 *     Value returns Value
	 *     Statement returns Value
	 *
	 * Constraint:
	 *     (const?='const'? type=Type? name=ID expression=Expression?)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VoidTypeDefinition returns VoidTypeDefinition
	 *
	 * Constraint:
	 *     {VoidTypeDefinition}
	 */
	protected void sequence_VoidTypeDefinition(ISerializationContext context, VoidTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
