/*
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xyz.varad.funpl.funPL.FunBlock;
import xyz.varad.funpl.funPL.FunMethod;
import xyz.varad.funpl.funPL.FunPLPackage;
import xyz.varad.funpl.funPL.FunParameter;
import xyz.varad.funpl.funPL.FunPlus;
import xyz.varad.funpl.funPL.FunProgram;
import xyz.varad.funpl.funPL.FunVarDeclaration;
import xyz.varad.funpl.funPL.IntConstant;
import xyz.varad.funpl.funPL.StringConstant;
import xyz.varad.funpl.services.FunPLGrammarAccess;

@SuppressWarnings("all")
public class FunPLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FunPLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FunPLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FunPLPackage.FUN_BLOCK:
				sequence_FunBlock(context, (FunBlock) semanticObject); 
				return; 
			case FunPLPackage.FUN_METHOD:
				sequence_FunMethod(context, (FunMethod) semanticObject); 
				return; 
			case FunPLPackage.FUN_PARAMETER:
				sequence_FunParameter(context, (FunParameter) semanticObject); 
				return; 
			case FunPLPackage.FUN_PLUS:
				sequence_FunPlus(context, (FunPlus) semanticObject); 
				return; 
			case FunPLPackage.FUN_PROGRAM:
				sequence_FunProgram(context, (FunProgram) semanticObject); 
				return; 
			case FunPLPackage.FUN_VAR_DECLARATION:
				sequence_FunVarDeclaration(context, (FunVarDeclaration) semanticObject); 
				return; 
			case FunPLPackage.INT_CONSTANT:
				sequence_FunAtomic(context, (IntConstant) semanticObject); 
				return; 
			case FunPLPackage.STRING_CONSTANT:
				sequence_FunAtomic(context, (StringConstant) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FunStatement returns IntConstant
	 *     FunExpression returns IntConstant
	 *     FunPlus returns IntConstant
	 *     FunPlus.FunPlus_1_0 returns IntConstant
	 *     FunPrimary returns IntConstant
	 *     FunAtomic returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_FunAtomic(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunAtomicAccess().getValueINTTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunStatement returns StringConstant
	 *     FunExpression returns StringConstant
	 *     FunPlus returns StringConstant
	 *     FunPlus.FunPlus_1_0 returns StringConstant
	 *     FunPrimary returns StringConstant
	 *     FunAtomic returns StringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_FunAtomic(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunAtomicAccess().getValueSTRINGTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunBlock returns FunBlock
	 *
	 * Constraint:
	 *     statements+=FunStatement*
	 */
	protected void sequence_FunBlock(ISerializationContext context, FunBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunAbstractElement returns FunMethod
	 *     FunMethod returns FunMethod
	 *
	 * Constraint:
	 *     (name=ID (params+=FunParameter params+=FunParameter*)? body=FunBlock)
	 */
	protected void sequence_FunMethod(ISerializationContext context, FunMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunParameter returns FunParameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FunParameter(ISerializationContext context, FunParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.FUN_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.FUN_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunParameterAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunStatement returns FunPlus
	 *     FunExpression returns FunPlus
	 *     FunPlus returns FunPlus
	 *     FunPlus.FunPlus_1_0 returns FunPlus
	 *     FunPrimary returns FunPlus
	 *
	 * Constraint:
	 *     (left=FunPlus_FunPlus_1_0 right=FunPrimary)
	 */
	protected void sequence_FunPlus(ISerializationContext context, FunPlus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.FUN_PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.FUN_PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, FunPLPackage.Literals.FUN_PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunPLPackage.Literals.FUN_PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunPlusAccess().getFunPlusLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFunPlusAccess().getRightFunPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunProgram returns FunProgram
	 *
	 * Constraint:
	 *     elements+=FunAbstractElement+
	 */
	protected void sequence_FunProgram(ISerializationContext context, FunProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunAbstractElement returns FunVarDeclaration
	 *     FunVarDeclaration returns FunVarDeclaration
	 *     FunStatement returns FunVarDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=FunExpression?)
	 */
	protected void sequence_FunVarDeclaration(ISerializationContext context, FunVarDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
