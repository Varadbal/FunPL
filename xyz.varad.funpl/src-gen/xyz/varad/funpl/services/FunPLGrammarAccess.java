/*
 * generated by Xtext 2.15.0
 */
package xyz.varad.funpl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FunPLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FunProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.FunProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//FunProgram:
		//	('package' name=QualifiedName ';')?
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';')? elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.AbstractElement");
		private final RuleCall cDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractElement:
		//	Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall() { return cDeclarationParserRuleCall; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOuterValueDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	OuterValueDeclaration | FunctionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//OuterValueDeclaration | FunctionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OuterValueDeclaration
		public RuleCall getOuterValueDeclarationParserRuleCall_0() { return cOuterValueDeclarationParserRuleCall_0; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_1() { return cFunctionDeclarationParserRuleCall_1; }
	}
	public class OuterValueDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.OuterValueDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OuterValueDeclaration ValueDeclaration:
		//	ValueDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ValueDeclaration ';'
		public Group getGroup() { return cGroup; }
		
		//ValueDeclaration
		public RuleCall getValueDeclarationParserRuleCall_0() { return cValueDeclarationParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ValueDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ValueDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstantConstKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Keyword cVarKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cDeclaredTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaredTypeTypeParserRuleCall_1_1_0 = (RuleCall)cDeclaredTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExpressionAssignment_1_3_1.eContents().get(0);
		
		//ValueDeclaration:
		//	{ValueDeclaration} ((constant?='const' | 'var') declaredType=Type? name=ID ('=' expression=Expression)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueDeclaration} ((constant?='const' | 'var') declaredType=Type? name=ID ('=' expression=Expression)?)
		public Group getGroup() { return cGroup; }
		
		//{ValueDeclaration}
		public Action getValueDeclarationAction_0() { return cValueDeclarationAction_0; }
		
		//(constant?='const' | 'var') declaredType=Type? name=ID ('=' expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//constant?='const' | 'var'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//constant?='const'
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }
		
		//'const'
		public Keyword getConstantConstKeyword_1_0_0_0() { return cConstantConstKeyword_1_0_0_0; }
		
		//'var'
		public Keyword getVarKeyword_1_0_1() { return cVarKeyword_1_0_1; }
		
		//declaredType=Type?
		public Assignment getDeclaredTypeAssignment_1_1() { return cDeclaredTypeAssignment_1_1; }
		
		//Type
		public RuleCall getDeclaredTypeTypeParserRuleCall_1_1_0() { return cDeclaredTypeTypeParserRuleCall_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//('=' expression=Expression)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_3_0() { return cEqualsSignKeyword_1_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_3_1() { return cExpressionAssignment_1_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_3_1_0() { return cExpressionExpressionParserRuleCall_1_3_1_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalValueDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclaredTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaredTypeTypeParserRuleCall_1_0 = (RuleCall)cDeclaredTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//ParameterDeclaration ValueDeclaration:
		//	{FinalValueDeclaration} declaredType=Type name=ID ("=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FinalValueDeclaration} declaredType=Type name=ID ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{FinalValueDeclaration}
		public Action getFinalValueDeclarationAction_0() { return cFinalValueDeclarationAction_0; }
		
		//declaredType=Type
		public Assignment getDeclaredTypeAssignment_1() { return cDeclaredTypeAssignment_1; }
		
		//Type
		public RuleCall getDeclaredTypeTypeParserRuleCall_1_0() { return cDeclaredTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredTypeTypeParserRuleCall_2_0 = (RuleCall)cDeclaredTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParameterListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterListParameterListParserRuleCall_4_0 = (RuleCall)cParameterListAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//FunctionDeclaration:
		//	{FunctionDeclaration}
		//	'function' declaredType=Type? name=ID
		//	parameterList=ParameterList
		//	body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDeclaration} 'function' declaredType=Type? name=ID parameterList=ParameterList body=Block
		public Group getGroup() { return cGroup; }
		
		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//declaredType=Type?
		public Assignment getDeclaredTypeAssignment_2() { return cDeclaredTypeAssignment_2; }
		
		//Type
		public RuleCall getDeclaredTypeTypeParserRuleCall_2_0() { return cDeclaredTypeTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//parameterList=ParameterList
		public Assignment getParameterListAssignment_4() { return cParameterListAssignment_4; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_4_0() { return cParameterListParameterListParserRuleCall_4_0; }
		
		//body=Block
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_5_0() { return cBodyBlockParserRuleCall_5_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterList:
		//	{ParameterList}
		//	'(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterList} '(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_2_0_0() { return cParametersParameterDeclarationParserRuleCall_2_0_0; }
		
		//(',' parameters+=ParameterDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_2_1_1_0() { return cParametersParameterDeclarationParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block}
		//	'{'
		//	statements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cValueDeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(ValueDeclaration | Expression | ReturnStatement) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(ValueDeclaration | Expression | ReturnStatement) ';'
		public Group getGroup() { return cGroup; }
		
		//ValueDeclaration | Expression | ReturnStatement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ValueDeclaration
		public RuleCall getValueDeclarationParserRuleCall_0_0() { return cValueDeclarationParserRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_0_2() { return cReturnStatementParserRuleCall_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ReturnStatement:
		//	{ReturnStatement}
		//	'return' expression=Expression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' expression=Expression?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArgumentList:
		//	{ArgumentList}
		//	'(' (arguments+=Expression (',' arguments+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgumentList} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgumentList}
		public Action getArgumentListAction_0() { return cArgumentListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///**
		// * ///////////////////////////////////////////////////////////////////
		// * Expression language
		// * ///////////////////////////////////////////////////////////////////
		// */ Expression:
		//	AssignmentExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssignmentExpression Expression:
		//	PlusExpression ({AssignmentExpression.left=current} '=' right=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusExpression ({AssignmentExpression.left=current} '=' right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//PlusExpression
		public RuleCall getPlusExpressionParserRuleCall_0() { return cPlusExpressionParserRuleCall_0; }
		
		//({AssignmentExpression.left=current} '=' right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssignmentExpression.left=current}
		public Action getAssignmentExpressionLeftAction_1_0() { return cAssignmentExpressionLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class PlusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.PlusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusExpression Expression:
		//	PrimaryExpression ({PlusExpression.left=current} '+' right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({PlusExpression.left=current} '+' right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({PlusExpression.left=current} '+' right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusExpression.left=current}
		public Action getPlusExpressionLeftAction_1_0() { return cPlusExpressionLeftAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression Expression:
		//	'(' Expression ')' | TerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | TerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_1() { return cTerminalExpressionParserRuleCall_1; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TerminalExpression Expression:
		//	ReferenceExpression | LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceExpression | LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceExpression
		public RuleCall getReferenceExpressionParserRuleCall_0() { return cReferenceExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
	}
	public class ReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationDeclarationCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDeclarationDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		
		//ReferenceExpression Expression:
		//	{ReferenceExpression} declaration=[Declaration|QualifiedName] argumentList=ArgumentList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceExpression} declaration=[Declaration|QualifiedName] argumentList=ArgumentList?
		public Group getGroup() { return cGroup; }
		
		//{ReferenceExpression}
		public Action getReferenceExpressionAction_0() { return cReferenceExpressionAction_0; }
		
		//declaration=[Declaration|QualifiedName]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//[Declaration|QualifiedName]
		public CrossReference getDeclarationDeclarationCrossReference_1_0() { return cDeclarationDeclarationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getDeclarationDeclarationQualifiedNameParserRuleCall_1_0_1() { return cDeclarationDeclarationQualifiedNameParserRuleCall_1_0_1; }
		
		//argumentList=ArgumentList?
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerLiteralExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//LiteralExpression Expression:
		//	{IntegerLiteralExpression} value=INTEGER | {BooleanLiteralExpression} value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerLiteralExpression} value=INTEGER | {BooleanLiteralExpression} value=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntegerLiteralExpression} value=INTEGER
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntegerLiteralExpression}
		public Action getIntegerLiteralExpressionAction_0_0() { return cIntegerLiteralExpressionAction_0_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0_1_0() { return cValueINTEGERTerminalRuleCall_0_1_0; }
		
		//{BooleanLiteralExpression} value=BOOLEAN
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteralExpression}
		public Action getBooleanLiteralExpressionAction_1_0() { return cBooleanLiteralExpressionAction_1_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_1_1_0() { return cValueBOOLEANTerminalRuleCall_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.Type");
		private final RuleCall cTypeDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///**
		// * ///////////////////////////////////////////////////////////////////
		// * Type Language
		// * ///////////////////////////////////////////////////////////////////
		// */ Type:
		//	TypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall() { return cTypeDefinitionParserRuleCall; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVoidTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeDefinition:
		//	IntegerTypeDefinition | BooleanTypeDefinition | VoidTypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerTypeDefinition | BooleanTypeDefinition | VoidTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerTypeDefinition
		public RuleCall getIntegerTypeDefinitionParserRuleCall_0() { return cIntegerTypeDefinitionParserRuleCall_0; }
		
		//BooleanTypeDefinition
		public RuleCall getBooleanTypeDefinitionParserRuleCall_1() { return cBooleanTypeDefinitionParserRuleCall_1; }
		
		//VoidTypeDefinition
		public RuleCall getVoidTypeDefinitionParserRuleCall_2() { return cVoidTypeDefinitionParserRuleCall_2; }
	}
	public class IntegerTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.IntegerTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerTypeDefinition BasicTypeDefinition:
		//	{IntegerTypeDefinition} 'int';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerTypeDefinition} 'int'
		public Group getGroup() { return cGroup; }
		
		//{IntegerTypeDefinition}
		public Action getIntegerTypeDefinitionAction_0() { return cIntegerTypeDefinitionAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}
	public class BooleanTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.BooleanTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanTypeDefinition BasicTypeDefinition:
		//	{BooleanTypeDefinition} 'bool';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanTypeDefinition} 'bool'
		public Group getGroup() { return cGroup; }
		
		//{BooleanTypeDefinition}
		public Action getBooleanTypeDefinitionAction_0() { return cBooleanTypeDefinitionAction_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}
	public class VoidTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.VoidTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidTypeDefinition BasicTypeDefinition:
		//	{VoidTypeDefinition} 'void';
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidTypeDefinition} 'void'
		public Group getGroup() { return cGroup; }
		
		//{VoidTypeDefinition}
		public Action getVoidTypeDefinitionAction_0() { return cVoidTypeDefinitionAction_0; }
		
		//'void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///**
		// * ///////////////////////////////////////////////////////////////////
		// * Scoping
		// * ///////////////////////////////////////////////////////////////////
		// */ QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final FunProgramElements pFunProgram;
	private final AbstractElementElements pAbstractElement;
	private final DeclarationElements pDeclaration;
	private final OuterValueDeclarationElements pOuterValueDeclaration;
	private final ValueDeclarationElements pValueDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterListElements pParameterList;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ArgumentListElements pArgumentList;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final PlusExpressionElements pPlusExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final TerminalExpressionElements pTerminalExpression;
	private final ReferenceExpressionElements pReferenceExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final TerminalRule tINTEGER;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final TypeElements pType;
	private final TypeDefinitionElements pTypeDefinition;
	private final IntegerTypeDefinitionElements pIntegerTypeDefinition;
	private final BooleanTypeDefinitionElements pBooleanTypeDefinition;
	private final VoidTypeDefinitionElements pVoidTypeDefinition;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	@Inject
	public FunPLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFunProgram = new FunProgramElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pDeclaration = new DeclarationElements();
		this.pOuterValueDeclaration = new OuterValueDeclarationElements();
		this.pValueDeclaration = new ValueDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pArgumentList = new ArgumentListElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pPlusExpression = new PlusExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pReferenceExpression = new ReferenceExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.INTEGER");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xyz.varad.funpl.FunPL.ANY_OTHER");
		this.pType = new TypeElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pIntegerTypeDefinition = new IntegerTypeDefinitionElements();
		this.pBooleanTypeDefinition = new BooleanTypeDefinitionElements();
		this.pVoidTypeDefinition = new VoidTypeDefinitionElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xyz.varad.funpl.FunPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//FunProgram:
	//	('package' name=QualifiedName ';')?
	//	elements+=AbstractElement*;
	public FunProgramElements getFunProgramAccess() {
		return pFunProgram;
	}
	
	public ParserRule getFunProgramRule() {
		return getFunProgramAccess().getRule();
	}
	
	//AbstractElement:
	//	Declaration;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Declaration:
	//	OuterValueDeclaration | FunctionDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//OuterValueDeclaration ValueDeclaration:
	//	ValueDeclaration ';';
	public OuterValueDeclarationElements getOuterValueDeclarationAccess() {
		return pOuterValueDeclaration;
	}
	
	public ParserRule getOuterValueDeclarationRule() {
		return getOuterValueDeclarationAccess().getRule();
	}
	
	//ValueDeclaration:
	//	{ValueDeclaration} ((constant?='const' | 'var') declaredType=Type? name=ID ('=' expression=Expression)?);
	public ValueDeclarationElements getValueDeclarationAccess() {
		return pValueDeclaration;
	}
	
	public ParserRule getValueDeclarationRule() {
		return getValueDeclarationAccess().getRule();
	}
	
	//ParameterDeclaration ValueDeclaration:
	//	{FinalValueDeclaration} declaredType=Type name=ID ("=" expression=Expression)?;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//FunctionDeclaration:
	//	{FunctionDeclaration}
	//	'function' declaredType=Type? name=ID
	//	parameterList=ParameterList
	//	body=Block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//ParameterList:
	//	{ParameterList}
	//	'(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'{'
	//	statements+=Statement*
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	(ValueDeclaration | Expression | ReturnStatement) ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	{ReturnStatement}
	//	'return' expression=Expression?;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ArgumentList:
	//	{ArgumentList}
	//	'(' (arguments+=Expression (',' arguments+=Expression)*)? ')';
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	///**
	// * ///////////////////////////////////////////////////////////////////
	// * Expression language
	// * ///////////////////////////////////////////////////////////////////
	// */ Expression:
	//	AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression:
	//	PlusExpression ({AssignmentExpression.left=current} '=' right=Expression)?;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//PlusExpression Expression:
	//	PrimaryExpression ({PlusExpression.left=current} '+' right=PrimaryExpression)*;
	public PlusExpressionElements getPlusExpressionAccess() {
		return pPlusExpression;
	}
	
	public ParserRule getPlusExpressionRule() {
		return getPlusExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	'(' Expression ')' | TerminalExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	ReferenceExpression | LiteralExpression;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//ReferenceExpression Expression:
	//	{ReferenceExpression} declaration=[Declaration|QualifiedName] argumentList=ArgumentList?;
	public ReferenceExpressionElements getReferenceExpressionAccess() {
		return pReferenceExpression;
	}
	
	public ParserRule getReferenceExpressionRule() {
		return getReferenceExpressionAccess().getRule();
	}
	
	//LiteralExpression Expression:
	//	{IntegerLiteralExpression} value=INTEGER | {BooleanLiteralExpression} value=BOOLEAN;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//terminal INTEGER returns Ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal BOOLEAN returns Ecore::EBoolean:
	//	'true'+ | 'false'+;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	///**
	// * ///////////////////////////////////////////////////////////////////
	// * Type Language
	// * ///////////////////////////////////////////////////////////////////
	// */ Type:
	//	TypeDefinition;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeDefinition:
	//	IntegerTypeDefinition | BooleanTypeDefinition | VoidTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//IntegerTypeDefinition BasicTypeDefinition:
	//	{IntegerTypeDefinition} 'int';
	public IntegerTypeDefinitionElements getIntegerTypeDefinitionAccess() {
		return pIntegerTypeDefinition;
	}
	
	public ParserRule getIntegerTypeDefinitionRule() {
		return getIntegerTypeDefinitionAccess().getRule();
	}
	
	//BooleanTypeDefinition BasicTypeDefinition:
	//	{BooleanTypeDefinition} 'bool';
	public BooleanTypeDefinitionElements getBooleanTypeDefinitionAccess() {
		return pBooleanTypeDefinition;
	}
	
	public ParserRule getBooleanTypeDefinitionRule() {
		return getBooleanTypeDefinitionAccess().getRule();
	}
	
	//VoidTypeDefinition BasicTypeDefinition:
	//	{VoidTypeDefinition} 'void';
	public VoidTypeDefinitionElements getVoidTypeDefinitionAccess() {
		return pVoidTypeDefinition;
	}
	
	public ParserRule getVoidTypeDefinitionRule() {
		return getVoidTypeDefinitionAccess().getRule();
	}
	
	///**
	// * ///////////////////////////////////////////////////////////////////
	// * Scoping
	// * ///////////////////////////////////////////////////////////////////
	// */ QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
}
