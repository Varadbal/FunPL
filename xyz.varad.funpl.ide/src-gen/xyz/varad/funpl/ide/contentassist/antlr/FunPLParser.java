/*
 * generated by Xtext 2.15.0
 */
package xyz.varad.funpl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xyz.varad.funpl.ide.contentassist.antlr.internal.InternalFunPLParser;
import xyz.varad.funpl.services.FunPLGrammarAccess;

public class FunPLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FunPLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FunPLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getValueDeclarationAccess().getAlternatives_1_0(), "rule__ValueDeclaration__Alternatives_1_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
			builder.put(grammarAccess.getLiteralExpressionAccess().getAlternatives(), "rule__LiteralExpression__Alternatives");
			builder.put(grammarAccess.getTypeDefinitionAccess().getAlternatives(), "rule__TypeDefinition__Alternatives");
			builder.put(grammarAccess.getFunProgramAccess().getGroup(), "rule__FunProgram__Group__0");
			builder.put(grammarAccess.getFunProgramAccess().getGroup_0(), "rule__FunProgram__Group_0__0");
			builder.put(grammarAccess.getOuterValueDeclarationAccess().getGroup(), "rule__OuterValueDeclaration__Group__0");
			builder.put(grammarAccess.getValueDeclarationAccess().getGroup(), "rule__ValueDeclaration__Group__0");
			builder.put(grammarAccess.getValueDeclarationAccess().getGroup_1(), "rule__ValueDeclaration__Group_1__0");
			builder.put(grammarAccess.getValueDeclarationAccess().getGroup_1_3(), "rule__ValueDeclaration__Group_1_3__0");
			builder.put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
			builder.put(grammarAccess.getParameterDeclarationAccess().getGroup_3(), "rule__ParameterDeclaration__Group_3__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_2(), "rule__ParameterList__Group_2__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_2_1(), "rule__ParameterList__Group_2_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
			builder.put(grammarAccess.getArgumentListAccess().getGroup(), "rule__ArgumentList__Group__0");
			builder.put(grammarAccess.getArgumentListAccess().getGroup_2(), "rule__ArgumentList__Group_2__0");
			builder.put(grammarAccess.getArgumentListAccess().getGroup_2_1(), "rule__ArgumentList__Group_2_1__0");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getGroup(), "rule__AssignmentExpression__Group__0");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getGroup_1(), "rule__AssignmentExpression__Group_1__0");
			builder.put(grammarAccess.getPlusExpressionAccess().getGroup(), "rule__PlusExpression__Group__0");
			builder.put(grammarAccess.getPlusExpressionAccess().getGroup_1(), "rule__PlusExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getReferenceExpressionAccess().getGroup(), "rule__ReferenceExpression__Group__0");
			builder.put(grammarAccess.getLiteralExpressionAccess().getGroup_0(), "rule__LiteralExpression__Group_0__0");
			builder.put(grammarAccess.getLiteralExpressionAccess().getGroup_1(), "rule__LiteralExpression__Group_1__0");
			builder.put(grammarAccess.getIntegerTypeDefinitionAccess().getGroup(), "rule__IntegerTypeDefinition__Group__0");
			builder.put(grammarAccess.getBooleanTypeDefinitionAccess().getGroup(), "rule__BooleanTypeDefinition__Group__0");
			builder.put(grammarAccess.getVoidTypeDefinitionAccess().getGroup(), "rule__VoidTypeDefinition__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getFunProgramAccess().getNameAssignment_0_1(), "rule__FunProgram__NameAssignment_0_1");
			builder.put(grammarAccess.getFunProgramAccess().getElementsAssignment_1(), "rule__FunProgram__ElementsAssignment_1");
			builder.put(grammarAccess.getValueDeclarationAccess().getConstantAssignment_1_0_0(), "rule__ValueDeclaration__ConstantAssignment_1_0_0");
			builder.put(grammarAccess.getValueDeclarationAccess().getDeclaredTypeAssignment_1_1(), "rule__ValueDeclaration__DeclaredTypeAssignment_1_1");
			builder.put(grammarAccess.getValueDeclarationAccess().getNameAssignment_1_2(), "rule__ValueDeclaration__NameAssignment_1_2");
			builder.put(grammarAccess.getValueDeclarationAccess().getExpressionAssignment_1_3_1(), "rule__ValueDeclaration__ExpressionAssignment_1_3_1");
			builder.put(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeAssignment_1(), "rule__ParameterDeclaration__DeclaredTypeAssignment_1");
			builder.put(grammarAccess.getParameterDeclarationAccess().getNameAssignment_2(), "rule__ParameterDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getParameterDeclarationAccess().getExpressionAssignment_3_1(), "rule__ParameterDeclaration__ExpressionAssignment_3_1");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeAssignment_2(), "rule__FunctionDeclaration__DeclaredTypeAssignment_2");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3(), "rule__FunctionDeclaration__NameAssignment_3");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParameterListAssignment_4(), "rule__FunctionDeclaration__ParameterListAssignment_4");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_5(), "rule__FunctionDeclaration__BodyAssignment_5");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_2_0(), "rule__ParameterList__ParametersAssignment_2_0");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_2_1_1(), "rule__ParameterList__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_2(), "rule__Block__StatementsAssignment_2");
			builder.put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2(), "rule__ReturnStatement__ExpressionAssignment_2");
			builder.put(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_0(), "rule__ArgumentList__ArgumentsAssignment_2_0");
			builder.put(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_1_1(), "rule__ArgumentList__ArgumentsAssignment_2_1_1");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2(), "rule__AssignmentExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusExpressionAccess().getRightAssignment_1_2(), "rule__PlusExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getReferenceExpressionAccess().getDeclarationAssignment_1(), "rule__ReferenceExpression__DeclarationAssignment_1");
			builder.put(grammarAccess.getReferenceExpressionAccess().getArgumentListAssignment_2(), "rule__ReferenceExpression__ArgumentListAssignment_2");
			builder.put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1(), "rule__LiteralExpression__ValueAssignment_0_1");
			builder.put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1(), "rule__LiteralExpression__ValueAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FunPLGrammarAccess grammarAccess;

	@Override
	protected InternalFunPLParser createParser() {
		InternalFunPLParser result = new InternalFunPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FunPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FunPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
