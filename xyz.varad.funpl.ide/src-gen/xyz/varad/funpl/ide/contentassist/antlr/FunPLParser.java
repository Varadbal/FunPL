/*
 * generated by Xtext 2.14.0
 */
package xyz.varad.funpl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xyz.varad.funpl.ide.contentassist.antlr.internal.InternalFunPLParser;
import xyz.varad.funpl.services.FunPLGrammarAccess;

public class FunPLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FunPLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FunPLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFunAbstractElementAccess().getAlternatives(), "rule__FunAbstractElement__Alternatives");
			builder.put(grammarAccess.getFunStatementAccess().getAlternatives(), "rule__FunStatement__Alternatives");
			builder.put(grammarAccess.getFunPrimaryAccess().getAlternatives(), "rule__FunPrimary__Alternatives");
			builder.put(grammarAccess.getFunAtomicAccess().getAlternatives(), "rule__FunAtomic__Alternatives");
			builder.put(grammarAccess.getFunVarDeclarationAccess().getGroup(), "rule__FunVarDeclaration__Group__0");
			builder.put(grammarAccess.getFunVarDeclarationAccess().getGroup_2(), "rule__FunVarDeclaration__Group_2__0");
			builder.put(grammarAccess.getFunMethodAccess().getGroup(), "rule__FunMethod__Group__0");
			builder.put(grammarAccess.getFunMethodAccess().getGroup_3(), "rule__FunMethod__Group_3__0");
			builder.put(grammarAccess.getFunMethodAccess().getGroup_3_1(), "rule__FunMethod__Group_3_1__0");
			builder.put(grammarAccess.getFunBlockAccess().getGroup(), "rule__FunBlock__Group__0");
			builder.put(grammarAccess.getFunPlusAccess().getGroup(), "rule__FunPlus__Group__0");
			builder.put(grammarAccess.getFunPlusAccess().getGroup_1(), "rule__FunPlus__Group_1__0");
			builder.put(grammarAccess.getFunPrimaryAccess().getGroup_0(), "rule__FunPrimary__Group_0__0");
			builder.put(grammarAccess.getFunAtomicAccess().getGroup_0(), "rule__FunAtomic__Group_0__0");
			builder.put(grammarAccess.getFunAtomicAccess().getGroup_1(), "rule__FunAtomic__Group_1__0");
			builder.put(grammarAccess.getFunProgramAccess().getElementsAssignment(), "rule__FunProgram__ElementsAssignment");
			builder.put(grammarAccess.getFunVarDeclarationAccess().getNameAssignment_1(), "rule__FunVarDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getFunVarDeclarationAccess().getValueAssignment_2_1(), "rule__FunVarDeclaration__ValueAssignment_2_1");
			builder.put(grammarAccess.getFunMethodAccess().getNameAssignment_1(), "rule__FunMethod__NameAssignment_1");
			builder.put(grammarAccess.getFunMethodAccess().getParamsAssignment_3_0(), "rule__FunMethod__ParamsAssignment_3_0");
			builder.put(grammarAccess.getFunMethodAccess().getParamsAssignment_3_1_1(), "rule__FunMethod__ParamsAssignment_3_1_1");
			builder.put(grammarAccess.getFunMethodAccess().getBodyAssignment_5(), "rule__FunMethod__BodyAssignment_5");
			builder.put(grammarAccess.getFunBlockAccess().getStatementsAssignment_2(), "rule__FunBlock__StatementsAssignment_2");
			builder.put(grammarAccess.getFunParameterAccess().getNameAssignment(), "rule__FunParameter__NameAssignment");
			builder.put(grammarAccess.getFunPlusAccess().getRightAssignment_1_2(), "rule__FunPlus__RightAssignment_1_2");
			builder.put(grammarAccess.getFunAtomicAccess().getValueAssignment_0_1(), "rule__FunAtomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getFunAtomicAccess().getValueAssignment_1_1(), "rule__FunAtomic__ValueAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FunPLGrammarAccess grammarAccess;

	@Override
	protected InternalFunPLParser createParser() {
		InternalFunPLParser result = new InternalFunPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FunPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FunPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
