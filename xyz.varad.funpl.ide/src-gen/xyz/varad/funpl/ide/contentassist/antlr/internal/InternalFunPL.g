/*
 * generated by Xtext 2.14.0
 */
grammar InternalFunPL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xyz.varad.funpl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xyz.varad.funpl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xyz.varad.funpl.services.FunPLGrammarAccess;

}
@parser::members {
	private FunPLGrammarAccess grammarAccess;

	public void setGrammarAccess(FunPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFunProgram
entryRuleFunProgram
:
{ before(grammarAccess.getFunProgramRule()); }
	 ruleFunProgram
{ after(grammarAccess.getFunProgramRule()); } 
	 EOF 
;

// Rule FunProgram
ruleFunProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunProgramAccess().getElementsAssignment()); }
		(rule__FunProgram__ElementsAssignment)*
		{ after(grammarAccess.getFunProgramAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunAbstractElement
entryRuleFunAbstractElement
:
{ before(grammarAccess.getFunAbstractElementRule()); }
	 ruleFunAbstractElement
{ after(grammarAccess.getFunAbstractElementRule()); } 
	 EOF 
;

// Rule FunAbstractElement
ruleFunAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunAbstractElementAccess().getAlternatives()); }
		(rule__FunAbstractElement__Alternatives)
		{ after(grammarAccess.getFunAbstractElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunVarDeclaration
entryRuleFunVarDeclaration
:
{ before(grammarAccess.getFunVarDeclarationRule()); }
	 ruleFunVarDeclaration
{ after(grammarAccess.getFunVarDeclarationRule()); } 
	 EOF 
;

// Rule FunVarDeclaration
ruleFunVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunVarDeclarationAccess().getGroup()); }
		(rule__FunVarDeclaration__Group__0)
		{ after(grammarAccess.getFunVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunMethod
entryRuleFunMethod
:
{ before(grammarAccess.getFunMethodRule()); }
	 ruleFunMethod
{ after(grammarAccess.getFunMethodRule()); } 
	 EOF 
;

// Rule FunMethod
ruleFunMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunMethodAccess().getGroup()); }
		(rule__FunMethod__Group__0)
		{ after(grammarAccess.getFunMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunBlock
entryRuleFunBlock
:
{ before(grammarAccess.getFunBlockRule()); }
	 ruleFunBlock
{ after(grammarAccess.getFunBlockRule()); } 
	 EOF 
;

// Rule FunBlock
ruleFunBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunBlockAccess().getGroup()); }
		(rule__FunBlock__Group__0)
		{ after(grammarAccess.getFunBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunParameter
entryRuleFunParameter
:
{ before(grammarAccess.getFunParameterRule()); }
	 ruleFunParameter
{ after(grammarAccess.getFunParameterRule()); } 
	 EOF 
;

// Rule FunParameter
ruleFunParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunParameterAccess().getNameAssignment()); }
		(rule__FunParameter__NameAssignment)
		{ after(grammarAccess.getFunParameterAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunStatement
entryRuleFunStatement
:
{ before(grammarAccess.getFunStatementRule()); }
	 ruleFunStatement
{ after(grammarAccess.getFunStatementRule()); } 
	 EOF 
;

// Rule FunStatement
ruleFunStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunStatementAccess().getAlternatives()); }
		(rule__FunStatement__Alternatives)
		{ after(grammarAccess.getFunStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunExpression
entryRuleFunExpression
:
{ before(grammarAccess.getFunExpressionRule()); }
	 ruleFunExpression
{ after(grammarAccess.getFunExpressionRule()); } 
	 EOF 
;

// Rule FunExpression
ruleFunExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunExpressionAccess().getFunPlusParserRuleCall()); }
		ruleFunPlus
		{ after(grammarAccess.getFunExpressionAccess().getFunPlusParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunPlus
entryRuleFunPlus
:
{ before(grammarAccess.getFunPlusRule()); }
	 ruleFunPlus
{ after(grammarAccess.getFunPlusRule()); } 
	 EOF 
;

// Rule FunPlus
ruleFunPlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunPlusAccess().getGroup()); }
		(rule__FunPlus__Group__0)
		{ after(grammarAccess.getFunPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunPrimary
entryRuleFunPrimary
:
{ before(grammarAccess.getFunPrimaryRule()); }
	 ruleFunPrimary
{ after(grammarAccess.getFunPrimaryRule()); } 
	 EOF 
;

// Rule FunPrimary
ruleFunPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunPrimaryAccess().getAlternatives()); }
		(rule__FunPrimary__Alternatives)
		{ after(grammarAccess.getFunPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunAtomic
entryRuleFunAtomic
:
{ before(grammarAccess.getFunAtomicRule()); }
	 ruleFunAtomic
{ after(grammarAccess.getFunAtomicRule()); } 
	 EOF 
;

// Rule FunAtomic
ruleFunAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunAtomicAccess().getAlternatives()); }
		(rule__FunAtomic__Alternatives)
		{ after(grammarAccess.getFunAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAbstractElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAbstractElementAccess().getFunVarDeclarationParserRuleCall_0()); }
		ruleFunVarDeclaration
		{ after(grammarAccess.getFunAbstractElementAccess().getFunVarDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunAbstractElementAccess().getFunMethodParserRuleCall_1()); }
		ruleFunMethod
		{ after(grammarAccess.getFunAbstractElementAccess().getFunMethodParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunStatementAccess().getFunVarDeclarationParserRuleCall_0()); }
		ruleFunVarDeclaration
		{ after(grammarAccess.getFunStatementAccess().getFunVarDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunStatementAccess().getFunExpressionParserRuleCall_1()); }
		ruleFunExpression
		{ after(grammarAccess.getFunStatementAccess().getFunExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunPrimaryAccess().getGroup_0()); }
		(rule__FunPrimary__Group_0__0)
		{ after(grammarAccess.getFunPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunPrimaryAccess().getFunAtomicParserRuleCall_1()); }
		ruleFunAtomic
		{ after(grammarAccess.getFunPrimaryAccess().getFunAtomicParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAtomicAccess().getGroup_0()); }
		(rule__FunAtomic__Group_0__0)
		{ after(grammarAccess.getFunAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunAtomicAccess().getGroup_1()); }
		(rule__FunAtomic__Group_1__0)
		{ after(grammarAccess.getFunAtomicAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunVarDeclaration__Group__0__Impl
	rule__FunVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunVarDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getFunVarDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunVarDeclaration__Group__1__Impl
	rule__FunVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunVarDeclarationAccess().getNameAssignment_1()); }
	(rule__FunVarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getFunVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunVarDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunVarDeclarationAccess().getGroup_2()); }
	(rule__FunVarDeclaration__Group_2__0)?
	{ after(grammarAccess.getFunVarDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunVarDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunVarDeclaration__Group_2__0__Impl
	rule__FunVarDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunVarDeclarationAccess().getEqualsSignKeyword_2_0()); }
	'='
	{ after(grammarAccess.getFunVarDeclarationAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunVarDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunVarDeclarationAccess().getValueAssignment_2_1()); }
	(rule__FunVarDeclaration__ValueAssignment_2_1)
	{ after(grammarAccess.getFunVarDeclarationAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunMethod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__0__Impl
	rule__FunMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getMethodKeyword_0()); }
	'method'
	{ after(grammarAccess.getFunMethodAccess().getMethodKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__1__Impl
	rule__FunMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getNameAssignment_1()); }
	(rule__FunMethod__NameAssignment_1)
	{ after(grammarAccess.getFunMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__2__Impl
	rule__FunMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunMethodAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__3__Impl
	rule__FunMethod__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getGroup_3()); }
	(rule__FunMethod__Group_3__0)?
	{ after(grammarAccess.getFunMethodAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__4__Impl
	rule__FunMethod__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunMethodAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getBodyAssignment_5()); }
	(rule__FunMethod__BodyAssignment_5)
	{ after(grammarAccess.getFunMethodAccess().getBodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunMethod__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group_3__0__Impl
	rule__FunMethod__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getParamsAssignment_3_0()); }
	(rule__FunMethod__ParamsAssignment_3_0)
	{ after(grammarAccess.getFunMethodAccess().getParamsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getGroup_3_1()); }
	(rule__FunMethod__Group_3_1__0)*
	{ after(grammarAccess.getFunMethodAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunMethod__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group_3_1__0__Impl
	rule__FunMethod__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getFunMethodAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunMethod__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunMethodAccess().getParamsAssignment_3_1_1()); }
	(rule__FunMethod__ParamsAssignment_3_1_1)
	{ after(grammarAccess.getFunMethodAccess().getParamsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunBlock__Group__0__Impl
	rule__FunBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunBlockAccess().getFunBlockAction_0()); }
	()
	{ after(grammarAccess.getFunBlockAccess().getFunBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunBlock__Group__1__Impl
	rule__FunBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getFunBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunBlock__Group__2__Impl
	rule__FunBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunBlockAccess().getStatementsAssignment_2()); }
	(rule__FunBlock__StatementsAssignment_2)*
	{ after(grammarAccess.getFunBlockAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getFunBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunPlus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPlus__Group__0__Impl
	rule__FunPlus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPlusAccess().getFunPrimaryParserRuleCall_0()); }
	ruleFunPrimary
	{ after(grammarAccess.getFunPlusAccess().getFunPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPlus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPlusAccess().getGroup_1()); }
	(rule__FunPlus__Group_1__0)*
	{ after(grammarAccess.getFunPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunPlus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPlus__Group_1__0__Impl
	rule__FunPlus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPlusAccess().getFunPlusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getFunPlusAccess().getFunPlusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPlus__Group_1__1__Impl
	rule__FunPlus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPlusAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getFunPlusAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPlus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPlusAccess().getRightAssignment_1_2()); }
	(rule__FunPlus__RightAssignment_1_2)
	{ after(grammarAccess.getFunPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunPrimary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPrimary__Group_0__0__Impl
	rule__FunPrimary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getFunPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPrimary__Group_0__1__Impl
	rule__FunPrimary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPrimaryAccess().getFunExpressionParserRuleCall_0_1()); }
	ruleFunExpression
	{ after(grammarAccess.getFunPrimaryAccess().getFunExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunPrimary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPrimary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getFunPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunAtomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunAtomic__Group_0__0__Impl
	rule__FunAtomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAtomicAccess().getStringConstantAction_0_0()); }
	()
	{ after(grammarAccess.getFunAtomicAccess().getStringConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunAtomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAtomicAccess().getValueAssignment_0_1()); }
	(rule__FunAtomic__ValueAssignment_0_1)
	{ after(grammarAccess.getFunAtomicAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunAtomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunAtomic__Group_1__0__Impl
	rule__FunAtomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAtomicAccess().getIntConstantAction_1_0()); }
	()
	{ after(grammarAccess.getFunAtomicAccess().getIntConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunAtomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAtomicAccess().getValueAssignment_1_1()); }
	(rule__FunAtomic__ValueAssignment_1_1)
	{ after(grammarAccess.getFunAtomicAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunProgram__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunProgramAccess().getElementsFunAbstractElementParserRuleCall_0()); }
		ruleFunAbstractElement
		{ after(grammarAccess.getFunProgramAccess().getElementsFunAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunVarDeclaration__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunVarDeclarationAccess().getValueFunExpressionParserRuleCall_2_1_0()); }
		ruleFunExpression
		{ after(grammarAccess.getFunVarDeclarationAccess().getValueFunExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunMethodAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__ParamsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_0_0()); }
		ruleFunParameter
		{ after(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__ParamsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_1_1_0()); }
		ruleFunParameter
		{ after(grammarAccess.getFunMethodAccess().getParamsFunParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunMethod__BodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunMethodAccess().getBodyFunBlockParserRuleCall_5_0()); }
		ruleFunBlock
		{ after(grammarAccess.getFunMethodAccess().getBodyFunBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunBlock__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunBlockAccess().getStatementsFunStatementParserRuleCall_2_0()); }
		ruleFunStatement
		{ after(grammarAccess.getFunBlockAccess().getStatementsFunStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunParameter__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunParameterAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunParameterAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunPlus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunPlusAccess().getRightFunPrimaryParserRuleCall_1_2_0()); }
		ruleFunPrimary
		{ after(grammarAccess.getFunPlusAccess().getRightFunPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAtomicAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFunAtomicAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunAtomic__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getFunAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
