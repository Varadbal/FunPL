/*
 * generated by Xtext 2.15.0
 */
grammar InternalFunPL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xyz.varad.funpl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xyz.varad.funpl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xyz.varad.funpl.services.FunPLGrammarAccess;

}
@parser::members {
	private FunPLGrammarAccess grammarAccess;

	public void setGrammarAccess(FunPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFunProgram
entryRuleFunProgram
:
{ before(grammarAccess.getFunProgramRule()); }
	 ruleFunProgram
{ after(grammarAccess.getFunProgramRule()); } 
	 EOF 
;

// Rule FunProgram
ruleFunProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunProgramAccess().getGroup()); }
		(rule__FunProgram__Group__0)
		{ after(grammarAccess.getFunProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getDeclarationParserRuleCall()); }
		ruleDeclaration
		{ after(grammarAccess.getAbstractElementAccess().getDeclarationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOuterValueDeclaration
entryRuleOuterValueDeclaration
:
{ before(grammarAccess.getOuterValueDeclarationRule()); }
	 ruleOuterValueDeclaration
{ after(grammarAccess.getOuterValueDeclarationRule()); } 
	 EOF 
;

// Rule OuterValueDeclaration
ruleOuterValueDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOuterValueDeclarationAccess().getGroup()); }
		(rule__OuterValueDeclaration__Group__0)
		{ after(grammarAccess.getOuterValueDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueDeclaration
entryRuleValueDeclaration
:
{ before(grammarAccess.getValueDeclarationRule()); }
	 ruleValueDeclaration
{ after(grammarAccess.getValueDeclarationRule()); } 
	 EOF 
;

// Rule ValueDeclaration
ruleValueDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getGroup()); }
		(rule__ValueDeclaration__Group__0)
		{ after(grammarAccess.getValueDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
		(rule__ParameterDeclaration__Group__0)
		{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
		(rule__FunctionDeclaration__Group__0)
		{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterList
entryRuleParameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
		(rule__ReturnStatement__Group__0)
		{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgumentList
entryRuleArgumentList
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentListAccess().getGroup()); }
		(rule__ArgumentList__Group__0)
		{ after(grammarAccess.getArgumentListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
		ruleAssignmentExpression
		{ after(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
		(rule__AssignmentExpression__Group__0)
		{ after(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusExpression
entryRulePlusExpression
:
{ before(grammarAccess.getPlusExpressionRule()); }
	 rulePlusExpression
{ after(grammarAccess.getPlusExpressionRule()); } 
	 EOF 
;

// Rule PlusExpression
rulePlusExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusExpressionAccess().getGroup()); }
		(rule__PlusExpression__Group__0)
		{ after(grammarAccess.getPlusExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
		(rule__TerminalExpression__Alternatives)
		{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReferenceExpression
entryRuleReferenceExpression
:
{ before(grammarAccess.getReferenceExpressionRule()); }
	 ruleReferenceExpression
{ after(grammarAccess.getReferenceExpressionRule()); } 
	 EOF 
;

// Rule ReferenceExpression
ruleReferenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceExpressionAccess().getGroup()); }
		(rule__ReferenceExpression__Group__0)
		{ after(grammarAccess.getReferenceExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall()); }
		ruleTypeDefinition
		{ after(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruleTypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
		(rule__TypeDefinition__Alternatives)
		{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerTypeDefinition
entryRuleIntegerTypeDefinition
:
{ before(grammarAccess.getIntegerTypeDefinitionRule()); }
	 ruleIntegerTypeDefinition
{ after(grammarAccess.getIntegerTypeDefinitionRule()); } 
	 EOF 
;

// Rule IntegerTypeDefinition
ruleIntegerTypeDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerTypeDefinitionAccess().getGroup()); }
		(rule__IntegerTypeDefinition__Group__0)
		{ after(grammarAccess.getIntegerTypeDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanTypeDefinition
entryRuleBooleanTypeDefinition
:
{ before(grammarAccess.getBooleanTypeDefinitionRule()); }
	 ruleBooleanTypeDefinition
{ after(grammarAccess.getBooleanTypeDefinitionRule()); } 
	 EOF 
;

// Rule BooleanTypeDefinition
ruleBooleanTypeDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanTypeDefinitionAccess().getGroup()); }
		(rule__BooleanTypeDefinition__Group__0)
		{ after(grammarAccess.getBooleanTypeDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVoidTypeDefinition
entryRuleVoidTypeDefinition
:
{ before(grammarAccess.getVoidTypeDefinitionRule()); }
	 ruleVoidTypeDefinition
{ after(grammarAccess.getVoidTypeDefinitionRule()); } 
	 EOF 
;

// Rule VoidTypeDefinition
ruleVoidTypeDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVoidTypeDefinitionAccess().getGroup()); }
		(rule__VoidTypeDefinition__Group__0)
		{ after(grammarAccess.getVoidTypeDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getOuterValueDeclarationParserRuleCall_0()); }
		ruleOuterValueDeclaration
		{ after(grammarAccess.getDeclarationAccess().getOuterValueDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
		ruleFunctionDeclaration
		{ after(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getConstantAssignment_1_0_0()); }
		(rule__ValueDeclaration__ConstantAssignment_1_0_0)
		{ after(grammarAccess.getValueDeclarationAccess().getConstantAssignment_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueDeclarationAccess().getVarKeyword_1_0_1()); }
		'var'
		{ after(grammarAccess.getValueDeclarationAccess().getVarKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getValueDeclarationParserRuleCall_0_0()); }
		ruleValueDeclaration
		{ after(grammarAccess.getStatementAccess().getValueDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_0_1()); }
		ruleExpression
		{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_2()); }
		ruleReturnStatement
		{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getTerminalExpressionParserRuleCall_1()); }
		ruleTerminalExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getTerminalExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getReferenceExpressionParserRuleCall_0()); }
		ruleReferenceExpression
		{ after(grammarAccess.getTerminalExpressionAccess().getReferenceExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
		ruleLiteralExpression
		{ after(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
		(rule__LiteralExpression__Group_0__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
		(rule__LiteralExpression__Group_1__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_0()); }
		ruleIntegerTypeDefinition
		{ after(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_1()); }
		ruleBooleanTypeDefinition
		{ after(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getVoidTypeDefinitionParserRuleCall_2()); }
		ruleVoidTypeDefinition
		{ after(grammarAccess.getTypeDefinitionAccess().getVoidTypeDefinitionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunProgram__Group__0__Impl
	rule__FunProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunProgramAccess().getGroup_0()); }
	(rule__FunProgram__Group_0__0)?
	{ after(grammarAccess.getFunProgramAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunProgram__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunProgramAccess().getElementsAssignment_1()); }
	(rule__FunProgram__ElementsAssignment_1)*
	{ after(grammarAccess.getFunProgramAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunProgram__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunProgram__Group_0__0__Impl
	rule__FunProgram__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunProgramAccess().getPackageKeyword_0_0()); }
	'package'
	{ after(grammarAccess.getFunProgramAccess().getPackageKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunProgram__Group_0__1__Impl
	rule__FunProgram__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunProgramAccess().getNameAssignment_0_1()); }
	(rule__FunProgram__NameAssignment_0_1)
	{ after(grammarAccess.getFunProgramAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunProgram__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunProgramAccess().getSemicolonKeyword_0_2()); }
	';'
	{ after(grammarAccess.getFunProgramAccess().getSemicolonKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OuterValueDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OuterValueDeclaration__Group__0__Impl
	rule__OuterValueDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OuterValueDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOuterValueDeclarationAccess().getValueDeclarationParserRuleCall_0()); }
	ruleValueDeclaration
	{ after(grammarAccess.getOuterValueDeclarationAccess().getValueDeclarationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OuterValueDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OuterValueDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OuterValueDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOuterValueDeclarationAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getOuterValueDeclarationAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group__0__Impl
	rule__ValueDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getValueDeclarationAction_0()); }
	()
	{ after(grammarAccess.getValueDeclarationAccess().getValueDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getGroup_1()); }
	(rule__ValueDeclaration__Group_1__0)
	{ after(grammarAccess.getValueDeclarationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1__0__Impl
	rule__ValueDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getAlternatives_1_0()); }
	(rule__ValueDeclaration__Alternatives_1_0)
	{ after(grammarAccess.getValueDeclarationAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1__1__Impl
	rule__ValueDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getDeclaredTypeAssignment_1_1()); }
	(rule__ValueDeclaration__DeclaredTypeAssignment_1_1)?
	{ after(grammarAccess.getValueDeclarationAccess().getDeclaredTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1__2__Impl
	rule__ValueDeclaration__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getNameAssignment_1_2()); }
	(rule__ValueDeclaration__NameAssignment_1_2)
	{ after(grammarAccess.getValueDeclarationAccess().getNameAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getGroup_1_3()); }
	(rule__ValueDeclaration__Group_1_3__0)?
	{ after(grammarAccess.getValueDeclarationAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueDeclaration__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1_3__0__Impl
	rule__ValueDeclaration__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getEqualsSignKeyword_1_3_0()); }
	'='
	{ after(grammarAccess.getValueDeclarationAccess().getEqualsSignKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueDeclaration__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueDeclarationAccess().getExpressionAssignment_1_3_1()); }
	(rule__ValueDeclaration__ExpressionAssignment_1_3_1)
	{ after(grammarAccess.getValueDeclarationAccess().getExpressionAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getFinalValueDeclarationAction_0()); }
	()
	{ after(grammarAccess.getParameterDeclarationAccess().getFinalValueDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeAssignment_1()); }
	(rule__ParameterDeclaration__DeclaredTypeAssignment_1)
	{ after(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_2()); }
	(rule__ParameterDeclaration__NameAssignment_2)
	{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getGroup_3()); }
	(rule__ParameterDeclaration__Group_3__0)?
	{ after(grammarAccess.getParameterDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group_3__0__Impl
	rule__ParameterDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_3_0()); }
	'='
	{ after(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getExpressionAssignment_3_1()); }
	(rule__ParameterDeclaration__ExpressionAssignment_3_1)
	{ after(grammarAccess.getParameterDeclarationAccess().getExpressionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
	()
	{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
	'function'
	{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeAssignment_2()); }
	(rule__FunctionDeclaration__DeclaredTypeAssignment_2)?
	{ after(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
	(rule__FunctionDeclaration__NameAssignment_3)
	{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getParameterListAssignment_4()); }
	(rule__FunctionDeclaration__ParameterListAssignment_4)
	{ after(grammarAccess.getFunctionDeclarationAccess().getParameterListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_5()); }
	(rule__FunctionDeclaration__BodyAssignment_5)
	{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterListAction_0()); }
	()
	{ after(grammarAccess.getParameterListAccess().getParameterListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__2__Impl
	rule__ParameterList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_2()); }
	(rule__ParameterList__Group_2__0)?
	{ after(grammarAccess.getParameterListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_2__0__Impl
	rule__ParameterList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParametersAssignment_2_0()); }
	(rule__ParameterList__ParametersAssignment_2_0)
	{ after(grammarAccess.getParameterListAccess().getParametersAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_2_1()); }
	(rule__ParameterList__Group_2_1__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_2_1__0__Impl
	rule__ParameterList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParametersAssignment_2_1_1()); }
	(rule__ParameterList__ParametersAssignment_2_1_1)
	{ after(grammarAccess.getParameterListAccess().getParametersAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
	(rule__Block__StatementsAssignment_2)*
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
	(rule__Statement__Alternatives_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
	()
	{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
	(rule__ReturnStatement__ExpressionAssignment_2)?
	{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getArgumentListAction_0()); }
	()
	{ after(grammarAccess.getArgumentListAccess().getArgumentListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__1__Impl
	rule__ArgumentList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__2__Impl
	rule__ArgumentList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getGroup_2()); }
	(rule__ArgumentList__Group_2__0)?
	{ after(grammarAccess.getArgumentListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_2__0__Impl
	rule__ArgumentList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_0()); }
	(rule__ArgumentList__ArgumentsAssignment_2_0)
	{ after(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getGroup_2_1()); }
	(rule__ArgumentList__Group_2_1__0)*
	{ after(grammarAccess.getArgumentListAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_2_1__0__Impl
	rule__ArgumentList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_1_1()); }
	(rule__ArgumentList__ArgumentsAssignment_2_1_1)
	{ after(grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group__0__Impl
	rule__AssignmentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getPlusExpressionParserRuleCall_0()); }
	rulePlusExpression
	{ after(grammarAccess.getAssignmentExpressionAccess().getPlusExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
	(rule__AssignmentExpression__Group_1__0)?
	{ after(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__0__Impl
	rule__AssignmentExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__1__Impl
	rule__AssignmentExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1()); }
	'='
	{ after(grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2()); }
	(rule__AssignmentExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpression__Group__0__Impl
	rule__PlusExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getPlusExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExpressionAccess().getGroup_1()); }
	(rule__PlusExpression__Group_1__0)*
	{ after(grammarAccess.getPlusExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpression__Group_1__0__Impl
	rule__PlusExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExpressionAccess().getPlusExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusExpressionAccess().getPlusExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpression__Group_1__1__Impl
	rule__PlusExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExpressionAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getPlusExpressionAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExpressionAccess().getRightAssignment_1_2()); }
	(rule__PlusExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPlusExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceExpression__Group__0__Impl
	rule__ReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceExpressionAccess().getReferenceExpressionAction_0()); }
	()
	{ after(grammarAccess.getReferenceExpressionAccess().getReferenceExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceExpression__Group__1__Impl
	rule__ReferenceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationAssignment_1()); }
	(rule__ReferenceExpression__DeclarationAssignment_1)
	{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceExpressionAccess().getArgumentListAssignment_2()); }
	(rule__ReferenceExpression__ArgumentListAssignment_2)?
	{ after(grammarAccess.getReferenceExpressionAccess().getArgumentListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__0__Impl
	rule__LiteralExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
	(rule__LiteralExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
	(rule__LiteralExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerTypeDefinition__Group__0__Impl
	rule__IntegerTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0()); }
	()
	{ after(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeDefinitionAccess().getIntKeyword_1()); }
	'int'
	{ after(grammarAccess.getIntegerTypeDefinitionAccess().getIntKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanTypeDefinition__Group__0__Impl
	rule__BooleanTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0()); }
	()
	{ after(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeDefinitionAccess().getBoolKeyword_1()); }
	'bool'
	{ after(grammarAccess.getBooleanTypeDefinitionAccess().getBoolKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VoidTypeDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VoidTypeDefinition__Group__0__Impl
	rule__VoidTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidTypeDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVoidTypeDefinitionAccess().getVoidTypeDefinitionAction_0()); }
	()
	{ after(grammarAccess.getVoidTypeDefinitionAccess().getVoidTypeDefinitionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidTypeDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VoidTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidTypeDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVoidTypeDefinitionAccess().getVoidKeyword_1()); }
	'void'
	{ after(grammarAccess.getVoidTypeDefinitionAccess().getVoidKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunProgram__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunProgramAccess().getNameQualifiedNameParserRuleCall_0_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getFunProgramAccess().getNameQualifiedNameParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunProgram__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunProgramAccess().getElementsAbstractElementParserRuleCall_1_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getFunProgramAccess().getElementsAbstractElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__ConstantAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getConstantConstKeyword_1_0_0_0()); }
		(
			{ before(grammarAccess.getValueDeclarationAccess().getConstantConstKeyword_1_0_0_0()); }
			'const'
			{ after(grammarAccess.getValueDeclarationAccess().getConstantConstKeyword_1_0_0_0()); }
		)
		{ after(grammarAccess.getValueDeclarationAccess().getConstantConstKeyword_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__DeclaredTypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_1_0()); }
		ruleType
		{ after(grammarAccess.getValueDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__NameAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getNameIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getValueDeclarationAccess().getNameIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueDeclaration__ExpressionAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueDeclarationAccess().getExpressionExpressionParserRuleCall_1_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getValueDeclarationAccess().getExpressionExpressionParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__DeclaredTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getParameterDeclarationAccess().getDeclaredTypeTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ExpressionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getParameterDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__DeclaredTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getFunctionDeclarationAccess().getDeclaredTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParameterListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_4_0()); }
		ruleParameterList
		{ after(grammarAccess.getFunctionDeclarationAccess().getParameterListParameterListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_0_0()); }
		ruleParameterDeclaration
		{ after(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_1_1_0()); }
		ruleParameterDeclaration
		{ after(grammarAccess.getParameterListAccess().getParametersParameterDeclarationParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ArgumentsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ArgumentsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getArgumentListAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getPlusExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__DeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__ArgumentListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceExpressionAccess().getArgumentListArgumentListParserRuleCall_2_0()); }
		ruleArgumentList
		{ after(grammarAccess.getReferenceExpressionAccess().getArgumentListArgumentListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueBOOLEANTerminalRuleCall_1_1_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getLiteralExpressionAccess().getValueBOOLEANTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INTEGER : ('-'? '0'..'9')+;

RULE_BOOLEAN : ('true'+|'false'+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
